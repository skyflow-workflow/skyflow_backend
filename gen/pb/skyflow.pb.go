// AWS State Functions API Reference
// https://docs.amazonaws.cn/en_us/step-functions/latest/apireference/Welcome.html

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.6.1
// source: proto/skyflow.proto

package pb

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "trpc.group/trpc/trpc-protocol/pb/go/trpc/proto"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ErrorCode 错误码定义
//
//	11XXX  system error
//	12XXX   template error
//	13XXX   exection error
type ErrorCode int32

const (
	// OK 正常
	ErrorCode_OK ErrorCode = 0
	// UnknownError 未知错误
	ErrorCode_UnknownError ErrorCode = 11000
	// InternelError 内部错误
	ErrorCode_InternelError ErrorCode = 11001
	// ResourceLimitExceeded 资源限制超出
	ErrorCode_ResourceLimitExceeded ErrorCode = 11002
	// The provided URI is not valid.
	ErrorCode_InvalidURI ErrorCode = 11003
	// template error
	ErrorCode_ActivityAlreadyExists     ErrorCode = 12001
	ErrorCode_ActivityDoesNotExist      ErrorCode = 12002
	ErrorCode_StateMachineAlreadyExists ErrorCode = 12003
	ErrorCode_StateMachineDoesNotExist  ErrorCode = 12004
	ErrorCode_NameSpaceAlreadyExists    ErrorCode = 12005
	ErrorCode_NameSpaceDoesNotExist     ErrorCode = 12006
	// execution error
	ErrorCode_ExecutionAlreadyExists ErrorCode = 13001
	ErrorCode_ExecutionDoesNotExist  ErrorCode = 13002
	// StateNotFound State 不存在
	ErrorCode_StateNotFound ErrorCode = 1003
	// StateGroupNotFound Stategroup 不存在
	ErrorCode_StateGroupNotFound ErrorCode = 1004
	// TaskTokenNotFound TaskToken 不存在
	ErrorCode_TaskTokenNotFound ErrorCode = 1005
	// NamespaceNotFound 不存在
	ErrorCode_NamespaceNotFound ErrorCode = 1006
	// ActivityNotFound activity 不存在
	ErrorCode_ActivityNotFound ErrorCode = 1007
	// StateMachineNotFound StateMachine 不存在
	ErrorCode_StateMachineNotFound ErrorCode = 1008
	// ExecutionUUIDExisted Execution UUID 已经存在
	ErrorCode_ExecutionUUIDExisted ErrorCode = 1009
	// ActivityTaskNotFound activity  task 不存在
	ErrorCode_ActivityTaskNotFound ErrorCode = 1010
	// StateStatusError State 状态错误
	ErrorCode_StateStatusError ErrorCode = 1011
	// ExecutionStatusError execution 状态错误
	ErrorCode_ExecutionStatusError ErrorCode = 1012
	// ParameterIsVaild parameter is vaild
	ErrorCode_ParameterIsVaild ErrorCode = 1013
	// ParameterLimitExceeded parameter limit exceeded
	ErrorCode_ParameterLimitExceeded ErrorCode = 1014
	// InputLimitExceeded input limit exceeded
	ErrorCode_InputLimitExceeded ErrorCode = 1015
	// OutputLimitExceeded output limit exceed
	ErrorCode_OutputLimitExceeded ErrorCode = 1016
	// StateMachineDeinitionInvalid StateMachine definition invalid
	ErrorCode_StateMachineDeinitionInvalid ErrorCode = 1017
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:     "OK",
		11000: "UnknownError",
		11001: "InternelError",
		11002: "ResourceLimitExceeded",
		11003: "InvalidURI",
		12001: "ActivityAlreadyExists",
		12002: "ActivityDoesNotExist",
		12003: "StateMachineAlreadyExists",
		12004: "StateMachineDoesNotExist",
		12005: "NameSpaceAlreadyExists",
		12006: "NameSpaceDoesNotExist",
		13001: "ExecutionAlreadyExists",
		13002: "ExecutionDoesNotExist",
		1003:  "StateNotFound",
		1004:  "StateGroupNotFound",
		1005:  "TaskTokenNotFound",
		1006:  "NamespaceNotFound",
		1007:  "ActivityNotFound",
		1008:  "StateMachineNotFound",
		1009:  "ExecutionUUIDExisted",
		1010:  "ActivityTaskNotFound",
		1011:  "StateStatusError",
		1012:  "ExecutionStatusError",
		1013:  "ParameterIsVaild",
		1014:  "ParameterLimitExceeded",
		1015:  "InputLimitExceeded",
		1016:  "OutputLimitExceeded",
		1017:  "StateMachineDeinitionInvalid",
	}
	ErrorCode_value = map[string]int32{
		"OK":                           0,
		"UnknownError":                 11000,
		"InternelError":                11001,
		"ResourceLimitExceeded":        11002,
		"InvalidURI":                   11003,
		"ActivityAlreadyExists":        12001,
		"ActivityDoesNotExist":         12002,
		"StateMachineAlreadyExists":    12003,
		"StateMachineDoesNotExist":     12004,
		"NameSpaceAlreadyExists":       12005,
		"NameSpaceDoesNotExist":        12006,
		"ExecutionAlreadyExists":       13001,
		"ExecutionDoesNotExist":        13002,
		"StateNotFound":                1003,
		"StateGroupNotFound":           1004,
		"TaskTokenNotFound":            1005,
		"NamespaceNotFound":            1006,
		"ActivityNotFound":             1007,
		"StateMachineNotFound":         1008,
		"ExecutionUUIDExisted":         1009,
		"ActivityTaskNotFound":         1010,
		"StateStatusError":             1011,
		"ExecutionStatusError":         1012,
		"ParameterIsVaild":             1013,
		"ParameterLimitExceeded":       1014,
		"InputLimitExceeded":           1015,
		"OutputLimitExceeded":          1016,
		"StateMachineDeinitionInvalid": 1017,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_skyflow_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_proto_skyflow_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{0}
}

// 分页请求结构
type PageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 请求分页大小
	PageSize int64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 请求页号
	PageNumber int64 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// 请求排序字段
	OrderBy       string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{0}
}

func (x *PageRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageRequest) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PageRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// 分页返回结构
type PageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 总数量
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// 请求分页大小
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 请求页号
	PageNumber int64 `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// 总页数
	PageCount     int64 `protobuf:"varint,4,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageResponse) Reset() {
	*x = PageResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageResponse) ProtoMessage() {}

func (x *PageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageResponse.ProtoReflect.Descriptor instead.
func (*PageResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{1}
}

func (x *PageResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PageResponse) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageResponse) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PageResponse) GetPageCount() int64 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

// PingResponse ping返回
type PingResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 返回码，0为正常，非0为异常
	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	// 异常信息说明
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{2}
}

func (x *PingResponse) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// HTTPResponseMessage HTTP API接口返回值格式
type HTTPResponseMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 返回码，0为正常，非0为异常
	Retcode int32 `protobuf:"varint,1,opt,name=retcode,proto3" json:"retcode,omitempty"`
	// 异常信息说明
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPResponseMessage) Reset() {
	*x = HTTPResponseMessage{}
	mi := &file_proto_skyflow_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPResponseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPResponseMessage) ProtoMessage() {}

func (x *HTTPResponseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPResponseMessage.ProtoReflect.Descriptor instead.
func (*HTTPResponseMessage) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{3}
}

func (x *HTTPResponseMessage) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *HTTPResponseMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// NamespaceInfo 命名空间信息
type NamespaceListItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name 命名空间名字
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// comment 命名空间描述
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// create_time timestample
	CreateTime int64 `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update_time timestample
	UpdateTime    int64 `protobuf:"varint,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceListItem) Reset() {
	*x = NamespaceListItem{}
	mi := &file_proto_skyflow_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceListItem) ProtoMessage() {}

func (x *NamespaceListItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceListItem.ProtoReflect.Descriptor instead.
func (*NamespaceListItem) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{4}
}

func (x *NamespaceListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceListItem) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *NamespaceListItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *NamespaceListItem) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// CreateNamespaceRequest 创建一个命名空间
type CreateNamespaceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name 命名空间名字
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// comment 命名空间描述
	Comment       string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNamespaceRequest) Reset() {
	*x = CreateNamespaceRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceRequest) ProtoMessage() {}

func (x *CreateNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceRequest.ProtoReflect.Descriptor instead.
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNamespaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNamespaceRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// CreateNamespaceResponse 创建一个命名空间返回结构
type CreateNamespaceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name namespace name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// create_time timestample
	CreateTime int64 `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update_time  update time timestample
	UpdateTime    int64 `protobuf:"varint,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNamespaceResponse) Reset() {
	*x = CreateNamespaceResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNamespaceResponse) ProtoMessage() {}

func (x *CreateNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNamespaceResponse.ProtoReflect.Descriptor instead.
func (*CreateNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{6}
}

func (x *CreateNamespaceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNamespaceResponse) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CreateNamespaceResponse) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// ListNamespacesRequest 获得命名空间列表
type ListNamespacesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 分页请求，默认 每分页大小 = 50条
	PageRequest   *PageRequest `protobuf:"bytes,1,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamespacesRequest) Reset() {
	*x = ListNamespacesRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesRequest) ProtoMessage() {}

func (x *ListNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{7}
}

func (x *ListNamespacesRequest) GetPageRequest() *PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

// ListNamespacesResponse 获得命名空间列表返回
type ListNamespacesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// data  查询到的执行列表
	Namespaces []*NamespaceListItem `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// 分页信息
	PageResponse  *PageResponse `protobuf:"bytes,2,opt,name=page_response,json=pageResponse,proto3" json:"page_response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamespacesResponse) Reset() {
	*x = ListNamespacesResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesResponse) ProtoMessage() {}

func (x *ListNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{8}
}

func (x *ListNamespacesResponse) GetNamespaces() []*NamespaceListItem {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *ListNamespacesResponse) GetPageResponse() *PageResponse {
	if x != nil {
		return x.PageResponse
	}
	return nil
}

// CreateActivityRequest 创建一个活动请求结构
type CreateActivityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name activity name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// comment activity comment
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// namespace activity namespace
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// parameters activity parameters
	Parameters    string `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateActivityRequest) Reset() {
	*x = CreateActivityRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateActivityRequest) ProtoMessage() {}

func (x *CreateActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateActivityRequest.ProtoReflect.Descriptor instead.
func (*CreateActivityRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{9}
}

func (x *CreateActivityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateActivityRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateActivityRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateActivityRequest) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

// CreateActivityResponse 创建一个活动返回结构
type CreateActivityResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// activity uri
	ActivityUri string `protobuf:"bytes,1,opt,name=activity_uri,json=activityUri,proto3" json:"activity_uri,omitempty"`
	// create_time create time timestample
	CreateTime int64 `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update_time timestample
	UpdateTime    int64 `protobuf:"varint,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateActivityResponse) Reset() {
	*x = CreateActivityResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateActivityResponse) ProtoMessage() {}

func (x *CreateActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateActivityResponse.ProtoReflect.Descriptor instead.
func (*CreateActivityResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{10}
}

func (x *CreateActivityResponse) GetActivityUri() string {
	if x != nil {
		return x.ActivityUri
	}
	return ""
}

func (x *CreateActivityResponse) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CreateActivityResponse) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// DescribeActivityRequest 获得活动详情
type DescribeActivityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// activity uri
	ActivityUri   string `protobuf:"bytes,1,opt,name=activity_uri,json=activityUri,proto3" json:"activity_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeActivityRequest) Reset() {
	*x = DescribeActivityRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeActivityRequest) ProtoMessage() {}

func (x *DescribeActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeActivityRequest.ProtoReflect.Descriptor instead.
func (*DescribeActivityRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{11}
}

func (x *DescribeActivityRequest) GetActivityUri() string {
	if x != nil {
		return x.ActivityUri
	}
	return ""
}

// DescribeActivityResponse 获得活动列表请求返回
type DescribeActivityResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name activity name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// comment activity comment
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// activity_uri activity uri
	ActivityUri string `protobuf:"bytes,3,opt,name=activity_uri,json=activityUri,proto3" json:"activity_uri,omitempty"`
	// create_time create time timestample
	CreateTime int64 `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update_time  update time timestample
	UpdateTime    int64 `protobuf:"varint,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeActivityResponse) Reset() {
	*x = DescribeActivityResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeActivityResponse) ProtoMessage() {}

func (x *DescribeActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeActivityResponse.ProtoReflect.Descriptor instead.
func (*DescribeActivityResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{12}
}

func (x *DescribeActivityResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DescribeActivityResponse) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *DescribeActivityResponse) GetActivityUri() string {
	if x != nil {
		return x.ActivityUri
	}
	return ""
}

func (x *DescribeActivityResponse) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DescribeActivityResponse) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type DeleteActivityRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// activity uri
	ActivityUri   string `protobuf:"bytes,1,opt,name=activity_uri,json=activityUri,proto3" json:"activity_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteActivityRequest) Reset() {
	*x = DeleteActivityRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteActivityRequest) ProtoMessage() {}

func (x *DeleteActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteActivityRequest.ProtoReflect.Descriptor instead.
func (*DeleteActivityRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteActivityRequest) GetActivityUri() string {
	if x != nil {
		return x.ActivityUri
	}
	return ""
}

// 删除活动请求返回， 占位符
type DeleteActivityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteActivityResponse) Reset() {
	*x = DeleteActivityResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteActivityResponse) ProtoMessage() {}

func (x *DeleteActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteActivityResponse.ProtoReflect.Descriptor instead.
func (*DeleteActivityResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{14}
}

// ListActivitiesRequest 获得活动列表请求结构
type ListActivitiesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// namespace 活动命名空间
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 分页请求，默认 每分页大小 = 50条
	PageRequest   *PageRequest `protobuf:"bytes,2,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActivitiesRequest) Reset() {
	*x = ListActivitiesRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivitiesRequest) ProtoMessage() {}

func (x *ListActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivitiesRequest.ProtoReflect.Descriptor instead.
func (*ListActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{15}
}

func (x *ListActivitiesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListActivitiesRequest) GetPageRequest() *PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

// ActivityListItem ...
type ActivityListItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name 活动名字
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// comment 活动描述
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// activity_uri 活动uri
	ActivityUri string `protobuf:"bytes,3,opt,name=activity_uri,json=activityUri,proto3" json:"activity_uri,omitempty"`
	// create_time timestample
	CreateTime int64 `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update_time timestample
	UpdateTime    int64 `protobuf:"varint,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityListItem) Reset() {
	*x = ActivityListItem{}
	mi := &file_proto_skyflow_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityListItem) ProtoMessage() {}

func (x *ActivityListItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityListItem.ProtoReflect.Descriptor instead.
func (*ActivityListItem) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{16}
}

func (x *ActivityListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivityListItem) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ActivityListItem) GetActivityUri() string {
	if x != nil {
		return x.ActivityUri
	}
	return ""
}

func (x *ActivityListItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ActivityListItem) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// ListActivitiesResponse 获得活动列表请求返回
type ListActivitiesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 查询到的执行列表
	Activities []*ActivityListItem `protobuf:"bytes,1,rep,name=activities,proto3" json:"activities,omitempty"`
	// 分页信息
	PageResponse  *PageResponse `protobuf:"bytes,2,opt,name=page_response,json=pageResponse,proto3" json:"page_response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListActivitiesResponse) Reset() {
	*x = ListActivitiesResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivitiesResponse) ProtoMessage() {}

func (x *ListActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivitiesResponse.ProtoReflect.Descriptor instead.
func (*ListActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{17}
}

func (x *ListActivitiesResponse) GetActivities() []*ActivityListItem {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *ListActivitiesResponse) GetPageResponse() *PageResponse {
	if x != nil {
		return x.PageResponse
	}
	return nil
}

// CreateStateMachineRequest 创建一个工作流请求结构
type CreateStateMachineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Comment       string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Namespace     string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Definition    string                 `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateStateMachineRequest) Reset() {
	*x = CreateStateMachineRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStateMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStateMachineRequest) ProtoMessage() {}

func (x *CreateStateMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStateMachineRequest.ProtoReflect.Descriptor instead.
func (*CreateStateMachineRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{18}
}

func (x *CreateStateMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStateMachineRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateStateMachineRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateStateMachineRequest) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// CreateStateMachineResponse 创建一个工作流返回结构
type CreateStateMachineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *StateMachineInfo      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateStateMachineResponse) Reset() {
	*x = CreateStateMachineResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStateMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStateMachineResponse) ProtoMessage() {}

func (x *CreateStateMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStateMachineResponse.ProtoReflect.Descriptor instead.
func (*CreateStateMachineResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{19}
}

func (x *CreateStateMachineResponse) GetData() *StateMachineInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// DescribeActivityRequest 获得工作流详情返回结构
type DescribeStateMachineRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StatemachineUri string                 `protobuf:"bytes,1,opt,name=statemachine_uri,json=statemachineUri,proto3" json:"statemachine_uri,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DescribeStateMachineRequest) Reset() {
	*x = DescribeStateMachineRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeStateMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeStateMachineRequest) ProtoMessage() {}

func (x *DescribeStateMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeStateMachineRequest.ProtoReflect.Descriptor instead.
func (*DescribeStateMachineRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{20}
}

func (x *DescribeStateMachineRequest) GetStatemachineUri() string {
	if x != nil {
		return x.StatemachineUri
	}
	return ""
}

// DescribeStateMachineResponse 获得活动列表请求返回结构
type DescribeStateMachineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *StateMachineInfo      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeStateMachineResponse) Reset() {
	*x = DescribeStateMachineResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeStateMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeStateMachineResponse) ProtoMessage() {}

func (x *DescribeStateMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeStateMachineResponse.ProtoReflect.Descriptor instead.
func (*DescribeStateMachineResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{21}
}

func (x *DescribeStateMachineResponse) GetData() *StateMachineInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteStateMachineRequest 删除一个工作流请求结构
type DeleteStateMachineRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StatemachineUri string                 `protobuf:"bytes,1,opt,name=statemachine_uri,json=statemachineUri,proto3" json:"statemachine_uri,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeleteStateMachineRequest) Reset() {
	*x = DeleteStateMachineRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteStateMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStateMachineRequest) ProtoMessage() {}

func (x *DeleteStateMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStateMachineRequest.ProtoReflect.Descriptor instead.
func (*DeleteStateMachineRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteStateMachineRequest) GetStatemachineUri() string {
	if x != nil {
		return x.StatemachineUri
	}
	return ""
}

// DeleteStateMachineResponse 删除一个工作流返回结构
type DeleteStateMachineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteStateMachineResponse) Reset() {
	*x = DeleteStateMachineResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteStateMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStateMachineResponse) ProtoMessage() {}

func (x *DeleteStateMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStateMachineResponse.ProtoReflect.Descriptor instead.
func (*DeleteStateMachineResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{23}
}

// UpdateStateMachineRequest 更新一个工作流请求结构
type UpdateStateMachineRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	StatemachineUri string                 `protobuf:"bytes,1,opt,name=statemachine_uri,json=statemachineUri,proto3" json:"statemachine_uri,omitempty"`
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment         string                 `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Definition      string                 `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateStateMachineRequest) Reset() {
	*x = UpdateStateMachineRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStateMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateMachineRequest) ProtoMessage() {}

func (x *UpdateStateMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateMachineRequest.ProtoReflect.Descriptor instead.
func (*UpdateStateMachineRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateStateMachineRequest) GetStatemachineUri() string {
	if x != nil {
		return x.StatemachineUri
	}
	return ""
}

func (x *UpdateStateMachineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateStateMachineRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *UpdateStateMachineRequest) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// UpdateStateMachineResponse 更新一个工作流返回结构
type UpdateStateMachineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStateMachineResponse) Reset() {
	*x = UpdateStateMachineResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStateMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateMachineResponse) ProtoMessage() {}

func (x *UpdateStateMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateMachineResponse.ProtoReflect.Descriptor instead.
func (*UpdateStateMachineResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{25}
}

// ListStateMachinesRequest 获得工作流列表请求结构
type ListStateMachinesRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Namespace string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// 分页请求，默认 每分页大小 = 50条
	PageRequest   *PageRequest `protobuf:"bytes,2,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStateMachinesRequest) Reset() {
	*x = ListStateMachinesRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStateMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStateMachinesRequest) ProtoMessage() {}

func (x *ListStateMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStateMachinesRequest.ProtoReflect.Descriptor instead.
func (*ListStateMachinesRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{26}
}

func (x *ListStateMachinesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListStateMachinesRequest) GetPageRequest() *PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

// ListStateMachinesResponse 获得工作流列表请求返回
type ListStateMachinesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 查询到的执行列表
	Statemachines []*StateMachineListItem `protobuf:"bytes,1,rep,name=statemachines,proto3" json:"statemachines,omitempty"`
	// 分页信息
	PageResponse  *PageResponse `protobuf:"bytes,2,opt,name=page_response,json=pageResponse,proto3" json:"page_response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStateMachinesResponse) Reset() {
	*x = ListStateMachinesResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStateMachinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStateMachinesResponse) ProtoMessage() {}

func (x *ListStateMachinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStateMachinesResponse.ProtoReflect.Descriptor instead.
func (*ListStateMachinesResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{27}
}

func (x *ListStateMachinesResponse) GetStatemachines() []*StateMachineListItem {
	if x != nil {
		return x.Statemachines
	}
	return nil
}

func (x *ListStateMachinesResponse) GetPageResponse() *PageResponse {
	if x != nil {
		return x.PageResponse
	}
	return nil
}

type StateMachineListItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name 工作流名字
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// comment 工作流描述
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// statemachine_uri 工作流uri
	StatemachineUri string `protobuf:"bytes,3,opt,name=statemachine_uri,json=statemachineUri,proto3" json:"statemachine_uri,omitempty"`
	// create_time timestample
	CreateTime int64 `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// update_time timestample
	UpdateTime    int64 `protobuf:"varint,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateMachineListItem) Reset() {
	*x = StateMachineListItem{}
	mi := &file_proto_skyflow_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateMachineListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMachineListItem) ProtoMessage() {}

func (x *StateMachineListItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMachineListItem.ProtoReflect.Descriptor instead.
func (*StateMachineListItem) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{28}
}

func (x *StateMachineListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StateMachineListItem) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *StateMachineListItem) GetStatemachineUri() string {
	if x != nil {
		return x.StatemachineUri
	}
	return ""
}

func (x *StateMachineListItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *StateMachineListItem) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// ExecutionListItem execution info in ListExecutionsResponse
type ExecutionListItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// execution_uuid
	ExecutionUuid string `protobuf:"bytes,1,opt,name=execution_uuid,json=executionUuid,proto3" json:"execution_uuid,omitempty"`
	// status execution status
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// title execution title
	Title      string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Definition string `protobuf:"bytes,4,opt,name=definition,proto3" json:"definition,omitempty"`
	// create_time timestample
	CreateTime int64 `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// start_time timestample
	StartTime int64 `protobuf:"varint,12,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// finish_time timestample
	FinishTime    int64 `protobuf:"varint,13,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionListItem) Reset() {
	*x = ExecutionListItem{}
	mi := &file_proto_skyflow_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionListItem) ProtoMessage() {}

func (x *ExecutionListItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionListItem.ProtoReflect.Descriptor instead.
func (*ExecutionListItem) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{29}
}

func (x *ExecutionListItem) GetExecutionUuid() string {
	if x != nil {
		return x.ExecutionUuid
	}
	return ""
}

func (x *ExecutionListItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecutionListItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExecutionListItem) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *ExecutionListItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ExecutionListItem) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ExecutionListItem) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

// StateInfo 一个State的状态描述
type StateInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status          string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StateDefinition string                 `protobuf:"bytes,4,opt,name=state_definition,json=stateDefinition,proto3" json:"state_definition,omitempty"`
	Input           string                 `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Output          string                 `protobuf:"bytes,6,opt,name=output,proto3" json:"output,omitempty"`
	CreateTime      string                 `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime       string                 `protobuf:"bytes,12,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime      string                 `protobuf:"bytes,13,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StateInfo) Reset() {
	*x = StateInfo{}
	mi := &file_proto_skyflow_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateInfo) ProtoMessage() {}

func (x *StateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateInfo.ProtoReflect.Descriptor instead.
func (*StateInfo) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{30}
}

func (x *StateInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StateInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StateInfo) GetStateDefinition() string {
	if x != nil {
		return x.StateDefinition
	}
	return ""
}

func (x *StateInfo) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *StateInfo) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *StateInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *StateInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *StateInfo) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

// ExecutionEventInfo 执行事件
type ExecutionEventInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StateId       int64                  `protobuf:"varint,2,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	StateName     string                 `protobuf:"bytes,3,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
	EventType     string                 `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Data          string                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	CreateTime    string                 `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime     string                 `protobuf:"bytes,12,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime    string                 `protobuf:"bytes,13,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionEventInfo) Reset() {
	*x = ExecutionEventInfo{}
	mi := &file_proto_skyflow_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionEventInfo) ProtoMessage() {}

func (x *ExecutionEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionEventInfo.ProtoReflect.Descriptor instead.
func (*ExecutionEventInfo) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{31}
}

func (x *ExecutionEventInfo) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

func (x *ExecutionEventInfo) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *ExecutionEventInfo) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ExecutionEventInfo) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ExecutionEventInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ExecutionEventInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ExecutionEventInfo) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

// ActivityInfo 活动信息
type ActivityInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Comment       string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	ActivityUri   string                 `protobuf:"bytes,3,opt,name=activity_uri,json=activityUri,proto3" json:"activity_uri,omitempty"`
	CreateTime    string                 `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime    string                 `protobuf:"bytes,12,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityInfo) Reset() {
	*x = ActivityInfo{}
	mi := &file_proto_skyflow_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityInfo) ProtoMessage() {}

func (x *ActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityInfo.ProtoReflect.Descriptor instead.
func (*ActivityInfo) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{32}
}

func (x *ActivityInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivityInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ActivityInfo) GetActivityUri() string {
	if x != nil {
		return x.ActivityUri
	}
	return ""
}

func (x *ActivityInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ActivityInfo) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

// StateMachineInfo 工作流信息
type StateMachineInfo struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Name                   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Comment                string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	StatemachineUri        string                 `protobuf:"bytes,3,opt,name=statemachine_uri,json=statemachineUri,proto3" json:"statemachine_uri,omitempty"`
	StatemachineDefinition string                 `protobuf:"bytes,4,opt,name=statemachine_definition,json=statemachineDefinition,proto3" json:"statemachine_definition,omitempty"`
	// stateMachine_type; pipeline/statemachine
	StatemachineType string `protobuf:"bytes,5,opt,name=statemachine_type,json=statemachineType,proto3" json:"statemachine_type,omitempty"`
	CreateTime       string `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ModifyTime       string `protobuf:"bytes,12,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StateMachineInfo) Reset() {
	*x = StateMachineInfo{}
	mi := &file_proto_skyflow_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateMachineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMachineInfo) ProtoMessage() {}

func (x *StateMachineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMachineInfo.ProtoReflect.Descriptor instead.
func (*StateMachineInfo) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{33}
}

func (x *StateMachineInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StateMachineInfo) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *StateMachineInfo) GetStatemachineUri() string {
	if x != nil {
		return x.StatemachineUri
	}
	return ""
}

func (x *StateMachineInfo) GetStatemachineDefinition() string {
	if x != nil {
		return x.StatemachineDefinition
	}
	return ""
}

func (x *StateMachineInfo) GetStatemachineType() string {
	if x != nil {
		return x.StatemachineType
	}
	return ""
}

func (x *StateMachineInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *StateMachineInfo) GetModifyTime() string {
	if x != nil {
		return x.ModifyTime
	}
	return ""
}

// ParseStateMachineRequest 解析一个工作流请求结构`
type ParseStateMachineRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// flow定义
	StatemachineDefinition string `protobuf:"bytes,1,opt,name=statemachine_definition,json=statemachineDefinition,proto3" json:"statemachine_definition,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ParseStateMachineRequest) Reset() {
	*x = ParseStateMachineRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseStateMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseStateMachineRequest) ProtoMessage() {}

func (x *ParseStateMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseStateMachineRequest.ProtoReflect.Descriptor instead.
func (*ParseStateMachineRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{34}
}

func (x *ParseStateMachineRequest) GetStatemachineDefinition() string {
	if x != nil {
		return x.StatemachineDefinition
	}
	return ""
}

// ParseStateMachineResponse 解析一个工作流返回结构
type ParseStateMachineResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// flow 类型
	StatemachineType string `protobuf:"bytes,1,opt,name=statemachine_type,json=statemachineType,proto3" json:"statemachine_type,omitempty"`
	// flow 详细定义
	StatemachineDetail string `protobuf:"bytes,2,opt,name=statemachine_detail,json=statemachineDetail,proto3" json:"statemachine_detail,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ParseStateMachineResponse) Reset() {
	*x = ParseStateMachineResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParseStateMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseStateMachineResponse) ProtoMessage() {}

func (x *ParseStateMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseStateMachineResponse.ProtoReflect.Descriptor instead.
func (*ParseStateMachineResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{35}
}

func (x *ParseStateMachineResponse) GetStatemachineType() string {
	if x != nil {
		return x.StatemachineType
	}
	return ""
}

func (x *ParseStateMachineResponse) GetStatemachineDetail() string {
	if x != nil {
		return x.StatemachineDetail
	}
	return ""
}

// 创建一个执行的请求体
// 参数约束：
// statemachine_uri 是指注册到 skyflowflow的 模板引用路径，
// statemachine_definition是自定义的StateMachine定义,jons/yaml格式
// statemachine_uri与statemachine_definition 二选一。
// execution_name：用户自定义的执行唯一名称，可选， 如果指定，自动生成一个新的uuid .
type StartExecutionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 工作流模板URI，可选，statemachine_uri 与statemachine_definition 必须指定一个
	StatemachineUri string `protobuf:"bytes,1,opt,name=statemachine_uri,json=statemachineUri,proto3" json:"statemachine_uri,omitempty"`
	// 流程模板定义，JSON/YAML格式的流程模板定义，可选
	StatemachineDefinition string `protobuf:"bytes,2,opt,name=statemachine_definition,json=statemachineDefinition,proto3" json:"statemachine_definition,omitempty"`
	// 工作流执行的标题，可为空
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// 工作流执行的输入，json格式的输入 ，可选，默认是空 '{}'
	Input string `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// 工作流执行的任务ID， 全局不可重复 uuid， 可选，不指定自动生成uuid
	ExecutionName string `protobuf:"bytes,5,opt,name=execution_name,json=executionName,proto3" json:"execution_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartExecutionRequest) Reset() {
	*x = StartExecutionRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExecutionRequest) ProtoMessage() {}

func (x *StartExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExecutionRequest.ProtoReflect.Descriptor instead.
func (*StartExecutionRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{36}
}

func (x *StartExecutionRequest) GetStatemachineUri() string {
	if x != nil {
		return x.StatemachineUri
	}
	return ""
}

func (x *StartExecutionRequest) GetStatemachineDefinition() string {
	if x != nil {
		return x.StatemachineDefinition
	}
	return ""
}

func (x *StartExecutionRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StartExecutionRequest) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *StartExecutionRequest) GetExecutionName() string {
	if x != nil {
		return x.ExecutionName
	}
	return ""
}

// 创建一个执行的请求返回结构
type StartExecutionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 返回的执行的唯一ID
	ExecutionUuid string `protobuf:"bytes,1,opt,name=execution_uuid,json=executionUuid,proto3" json:"execution_uuid,omitempty"`
	// 执行创建的时间
	CreateTime    string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartExecutionResponse) Reset() {
	*x = StartExecutionResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartExecutionResponse) ProtoMessage() {}

func (x *StartExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartExecutionResponse.ProtoReflect.Descriptor instead.
func (*StartExecutionResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{37}
}

func (x *StartExecutionResponse) GetExecutionUuid() string {
	if x != nil {
		return x.ExecutionUuid
	}
	return ""
}

func (x *StartExecutionResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

// 获得一个执行的描述请求结构
type DescribeExecutionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// execution uuid 必选
	ExecutionUuid string `protobuf:"bytes,1,opt,name=execution_uuid,json=executionUuid,proto3" json:"execution_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeExecutionRequest) Reset() {
	*x = DescribeExecutionRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeExecutionRequest) ProtoMessage() {}

func (x *DescribeExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeExecutionRequest.ProtoReflect.Descriptor instead.
func (*DescribeExecutionRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{38}
}

func (x *DescribeExecutionRequest) GetExecutionUuid() string {
	if x != nil {
		return x.ExecutionUuid
	}
	return ""
}

// 获得一个执行的描述d的返回结构
type DescribeExecutionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeExecutionResponse) Reset() {
	*x = DescribeExecutionResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeExecutionResponse) ProtoMessage() {}

func (x *DescribeExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeExecutionResponse.ProtoReflect.Descriptor instead.
func (*DescribeExecutionResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{39}
}

// 获得一个执行的执行的Bone请求结构
type DescribeExecutionBoneRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// execution uuid 必选
	ExecutionUuid string `protobuf:"bytes,1,opt,name=execution_uuid,json=executionUuid,proto3" json:"execution_uuid,omitempty"`
	// pipeline_mode 是否是pipeline模式， 可选，默认是false
	PipelineMode  bool `protobuf:"varint,2,opt,name=pipeline_mode,json=pipelineMode,proto3" json:"pipeline_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeExecutionBoneRequest) Reset() {
	*x = DescribeExecutionBoneRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeExecutionBoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeExecutionBoneRequest) ProtoMessage() {}

func (x *DescribeExecutionBoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeExecutionBoneRequest.ProtoReflect.Descriptor instead.
func (*DescribeExecutionBoneRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{40}
}

func (x *DescribeExecutionBoneRequest) GetExecutionUuid() string {
	if x != nil {
		return x.ExecutionUuid
	}
	return ""
}

func (x *DescribeExecutionBoneRequest) GetPipelineMode() bool {
	if x != nil {
		return x.PipelineMode
	}
	return false
}

// 获得一个执行的描述d的返回结构
type DescribeExecutionBoneResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ExecutionInfo execution = 1 ;
	Bone          string `protobuf:"bytes,2,opt,name=bone,proto3" json:"bone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeExecutionBoneResponse) Reset() {
	*x = DescribeExecutionBoneResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeExecutionBoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeExecutionBoneResponse) ProtoMessage() {}

func (x *DescribeExecutionBoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeExecutionBoneResponse.ProtoReflect.Descriptor instead.
func (*DescribeExecutionBoneResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{41}
}

func (x *DescribeExecutionBoneResponse) GetBone() string {
	if x != nil {
		return x.Bone
	}
	return ""
}

// 终止一个执行
type StopExecutionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// execution uuid， 必选
	ExecutionUuid string `protobuf:"bytes,1,opt,name=execution_uuid,json=executionUuid,proto3" json:"execution_uuid,omitempty"`
	// Error 错误类型，用来匹配异常, 必选
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// cause， error的文本描述， 可选
	Cause         string `protobuf:"bytes,3,opt,name=cause,proto3" json:"cause,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopExecutionRequest) Reset() {
	*x = StopExecutionRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopExecutionRequest) ProtoMessage() {}

func (x *StopExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopExecutionRequest.ProtoReflect.Descriptor instead.
func (*StopExecutionRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{42}
}

func (x *StopExecutionRequest) GetExecutionUuid() string {
	if x != nil {
		return x.ExecutionUuid
	}
	return ""
}

func (x *StopExecutionRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *StopExecutionRequest) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

// ListExecutionsRequest 获得execution列表请求结构
type ListExecutionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流程名字, 按照名字查询， 可选
	StatemachineUri string `protobuf:"bytes,1,opt,name=statemachine_uri,json=statemachineUri,proto3" json:"statemachine_uri,omitempty"`
	// uuid 列表，指定的uuid列表查询， 可选, 最大100个
	ExecutionUuids []string `protobuf:"bytes,2,rep,name=execution_uuids,json=executionUuids,proto3" json:"execution_uuids,omitempty"`
	// 状态，按照状态查询， 可选
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// title按照title 关键字查询，可选。title like "%${title}%"
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// 分页请求，默认 每分页大小 = 50条
	PageRequest   *PageRequest `protobuf:"bytes,10,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExecutionsRequest) Reset() {
	*x = ListExecutionsRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionsRequest) ProtoMessage() {}

func (x *ListExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{43}
}

func (x *ListExecutionsRequest) GetStatemachineUri() string {
	if x != nil {
		return x.StatemachineUri
	}
	return ""
}

func (x *ListExecutionsRequest) GetExecutionUuids() []string {
	if x != nil {
		return x.ExecutionUuids
	}
	return nil
}

func (x *ListExecutionsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListExecutionsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListExecutionsRequest) GetPageRequest() *PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

// ListExecutionsResponse 获得execution列表返回值
type ListExecutionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 查询到的执行列表
	Executions []*ExecutionListItem `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`
	// 分页信息
	PageResponse  *PageResponse `protobuf:"bytes,2,opt,name=page_response,json=pageResponse,proto3" json:"page_response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExecutionsResponse) Reset() {
	*x = ListExecutionsResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionsResponse) ProtoMessage() {}

func (x *ListExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{44}
}

func (x *ListExecutionsResponse) GetExecutions() []*ExecutionListItem {
	if x != nil {
		return x.Executions
	}
	return nil
}

func (x *ListExecutionsResponse) GetPageResponse() *PageResponse {
	if x != nil {
		return x.PageResponse
	}
	return nil
}

// ListExecutionEventsRequest  获得一个执行的Event列表请求结构
type ListExecutionEventsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExecutionUuid string                 `protobuf:"bytes,1,opt,name=execution_uuid,json=executionUuid,proto3" json:"execution_uuid,omitempty"`
	PageRequest   *PageRequest           `protobuf:"bytes,2,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExecutionEventsRequest) Reset() {
	*x = ListExecutionEventsRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExecutionEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionEventsRequest) ProtoMessage() {}

func (x *ListExecutionEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionEventsRequest.ProtoReflect.Descriptor instead.
func (*ListExecutionEventsRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{45}
}

func (x *ListExecutionEventsRequest) GetExecutionUuid() string {
	if x != nil {
		return x.ExecutionUuid
	}
	return ""
}

func (x *ListExecutionEventsRequest) GetPageRequest() *PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

// ListExecutionEventsResponse 获得一个执行的Event列表返回值
type ListExecutionEventsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 返回Event列表
	Data []*ExecutionEventInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// 分页信息
	PageResponse  *PageResponse `protobuf:"bytes,2,opt,name=page_response,json=pageResponse,proto3" json:"page_response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExecutionEventsResponse) Reset() {
	*x = ListExecutionEventsResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExecutionEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionEventsResponse) ProtoMessage() {}

func (x *ListExecutionEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionEventsResponse.ProtoReflect.Descriptor instead.
func (*ListExecutionEventsResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{46}
}

func (x *ListExecutionEventsResponse) GetData() []*ExecutionEventInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListExecutionEventsResponse) GetPageResponse() *PageResponse {
	if x != nil {
		return x.PageResponse
	}
	return nil
}

// DescribeStateRequest 获得一个State的信息请求结构
type DescribeStateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State id
	StateId       int64 `protobuf:"varint,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeStateRequest) Reset() {
	*x = DescribeStateRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeStateRequest) ProtoMessage() {}

func (x *DescribeStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeStateRequest.ProtoReflect.Descriptor instead.
func (*DescribeStateRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{47}
}

func (x *DescribeStateRequest) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

// DescribeStateRequest 获得一个State的信息返回结构
type DescribeStateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 返回的State 状态信息
	Data *StateInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// execution uuid
	ExecutionUuid string `protobuf:"bytes,2,opt,name=execution_uuid,json=executionUuid,proto3" json:"execution_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeStateResponse) Reset() {
	*x = DescribeStateResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeStateResponse) ProtoMessage() {}

func (x *DescribeStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeStateResponse.ProtoReflect.Descriptor instead.
func (*DescribeStateResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{48}
}

func (x *DescribeStateResponse) GetData() *StateInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DescribeStateResponse) GetExecutionUuid() string {
	if x != nil {
		return x.ExecutionUuid
	}
	return ""
}

// ListStateEventsRequest 获得一个State的执行事件列表请求机构
type ListStateEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State id
	StateId int64 `protobuf:"varint,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	// 分页信息
	PageRequest   *PageRequest `protobuf:"bytes,2,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStateEventsRequest) Reset() {
	*x = ListStateEventsRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStateEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStateEventsRequest) ProtoMessage() {}

func (x *ListStateEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStateEventsRequest.ProtoReflect.Descriptor instead.
func (*ListStateEventsRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{49}
}

func (x *ListStateEventsRequest) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

func (x *ListStateEventsRequest) GetPageRequest() *PageRequest {
	if x != nil {
		return x.PageRequest
	}
	return nil
}

// GetActivityTaskRequest 通过URI查询是否有一个需要执行的task
type GetActivityTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// task uri
	ActivityUri   string `protobuf:"bytes,1,opt,name=activity_uri,json=activityUri,proto3" json:"activity_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActivityTaskRequest) Reset() {
	*x = GetActivityTaskRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActivityTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityTaskRequest) ProtoMessage() {}

func (x *GetActivityTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityTaskRequest.ProtoReflect.Descriptor instead.
func (*GetActivityTaskRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{50}
}

func (x *GetActivityTaskRequest) GetActivityUri() string {
	if x != nil {
		return x.ActivityUri
	}
	return ""
}

// GetActivityTaskResponse 返回查询到的结构
type GetActivityTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// task_uri
	ActivityUri string `protobuf:"bytes,1,opt,name=activity_uri,json=activityUri,proto3" json:"activity_uri,omitempty"`
	// task_token
	TaskToken string `protobuf:"bytes,2,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// task 的输入，需要worker自己解码
	Input string `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	// Deprecated: 该字段已经废弃，使用timeout_seconds
	// task 的超时时间，单位(s), 0表示不超时
	TimeoutSecond int64 `protobuf:"varint,4,opt,name=timeout_second,json=timeoutSecond,proto3" json:"timeout_second,omitempty"`
	// Deprecated: 该字段已经废弃，使用heartbeat_seconds
	// task 心跳超时时间，单位(s), 0 表示不超时
	HeartbeatTimeoutSecond int64 `protobuf:"varint,5,opt,name=heartbeat_timeout_second,json=heartbeatTimeoutSecond,proto3" json:"heartbeat_timeout_second,omitempty"`
	// task 的超时时间，单位(s), 0表示不超时
	TimeoutSeconds int64 `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// task 心跳超时时间，单位(s), 0 表示不超时
	HeartbeatSeconds int64 `protobuf:"varint,7,opt,name=heartbeat_seconds,json=heartbeatSeconds,proto3" json:"heartbeat_seconds,omitempty"`
	// task 的额外信息
	ExtraInfo     *GetActivityTaskResponse_ExtraInfo `protobuf:"bytes,10,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActivityTaskResponse) Reset() {
	*x = GetActivityTaskResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActivityTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityTaskResponse) ProtoMessage() {}

func (x *GetActivityTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityTaskResponse.ProtoReflect.Descriptor instead.
func (*GetActivityTaskResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{51}
}

func (x *GetActivityTaskResponse) GetActivityUri() string {
	if x != nil {
		return x.ActivityUri
	}
	return ""
}

func (x *GetActivityTaskResponse) GetTaskToken() string {
	if x != nil {
		return x.TaskToken
	}
	return ""
}

func (x *GetActivityTaskResponse) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *GetActivityTaskResponse) GetTimeoutSecond() int64 {
	if x != nil {
		return x.TimeoutSecond
	}
	return 0
}

func (x *GetActivityTaskResponse) GetHeartbeatTimeoutSecond() int64 {
	if x != nil {
		return x.HeartbeatTimeoutSecond
	}
	return 0
}

func (x *GetActivityTaskResponse) GetTimeoutSeconds() int64 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *GetActivityTaskResponse) GetHeartbeatSeconds() int64 {
	if x != nil {
		return x.HeartbeatSeconds
	}
	return 0
}

func (x *GetActivityTaskResponse) GetExtraInfo() *GetActivityTaskResponse_ExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

// SendTaskSuccessRequest 发送task 成功
type SendTaskSuccessRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// task token
	TaskToken string `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// output task 执行的output， json 类型
	Output        string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTaskSuccessRequest) Reset() {
	*x = SendTaskSuccessRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTaskSuccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTaskSuccessRequest) ProtoMessage() {}

func (x *SendTaskSuccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTaskSuccessRequest.ProtoReflect.Descriptor instead.
func (*SendTaskSuccessRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{52}
}

func (x *SendTaskSuccessRequest) GetTaskToken() string {
	if x != nil {
		return x.TaskToken
	}
	return ""
}

func (x *SendTaskSuccessRequest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// SendTaskFailureRequest 发送task 失败
type SendTaskFailureRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// task token
	TaskToken string `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// error 错误类型，用来匹配异常
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// cause， error的文本描述
	Cause         string `protobuf:"bytes,3,opt,name=cause,proto3" json:"cause,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTaskFailureRequest) Reset() {
	*x = SendTaskFailureRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTaskFailureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTaskFailureRequest) ProtoMessage() {}

func (x *SendTaskFailureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTaskFailureRequest.ProtoReflect.Descriptor instead.
func (*SendTaskFailureRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{53}
}

func (x *SendTaskFailureRequest) GetTaskToken() string {
	if x != nil {
		return x.TaskToken
	}
	return ""
}

func (x *SendTaskFailureRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SendTaskFailureRequest) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

// SendTaskHeartbeatRequest 发送task 心跳
type SendTaskHeartbeatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// task token
	TaskToken string `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// task 可以附带的message
	Message       string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTaskHeartbeatRequest) Reset() {
	*x = SendTaskHeartbeatRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTaskHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTaskHeartbeatRequest) ProtoMessage() {}

func (x *SendTaskHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTaskHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*SendTaskHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{54}
}

func (x *SendTaskHeartbeatRequest) GetTaskToken() string {
	if x != nil {
		return x.TaskToken
	}
	return ""
}

func (x *SendTaskHeartbeatRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SendTaskReferenceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// task token
	TaskToken string `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// task 关联的链接描述
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// task关联的链接url
	Url           string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTaskReferenceRequest) Reset() {
	*x = SendTaskReferenceRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTaskReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTaskReferenceRequest) ProtoMessage() {}

func (x *SendTaskReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTaskReferenceRequest.ProtoReflect.Descriptor instead.
func (*SendTaskReferenceRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{55}
}

func (x *SendTaskReferenceRequest) GetTaskToken() string {
	if x != nil {
		return x.TaskToken
	}
	return ""
}

func (x *SendTaskReferenceRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendTaskReferenceRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// StoreTaskDataRequest 存储task 临时数据
type StoreTaskDataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// task token
	TaskToken string `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	// task 临时数据
	Data          string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreTaskDataRequest) Reset() {
	*x = StoreTaskDataRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreTaskDataRequest) ProtoMessage() {}

func (x *StoreTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreTaskDataRequest.ProtoReflect.Descriptor instead.
func (*StoreTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{56}
}

func (x *StoreTaskDataRequest) GetTaskToken() string {
	if x != nil {
		return x.TaskToken
	}
	return ""
}

func (x *StoreTaskDataRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// LoadTaskDataRequest 获得task 临时数据
type LoadTaskDataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State id
	StateId       int64 `protobuf:"varint,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadTaskDataRequest) Reset() {
	*x = LoadTaskDataRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadTaskDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTaskDataRequest) ProtoMessage() {}

func (x *LoadTaskDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTaskDataRequest.ProtoReflect.Descriptor instead.
func (*LoadTaskDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{57}
}

func (x *LoadTaskDataRequest) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

// LoadTaskDataResponse 获得task 临时数据
type LoadTaskDataResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// task 临时数据
	Data          string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadTaskDataResponse) Reset() {
	*x = LoadTaskDataResponse{}
	mi := &file_proto_skyflow_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadTaskDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTaskDataResponse) ProtoMessage() {}

func (x *LoadTaskDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTaskDataResponse.ProtoReflect.Descriptor instead.
func (*LoadTaskDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{58}
}

func (x *LoadTaskDataResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// SendStateSuccessRequest 发送State 成功
type SendStateSkipRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State id
	StateId int64 `protobuf:"varint,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	// 下一个步骤名
	NextState string `protobuf:"bytes,2,opt,name=next_state,json=nextState,proto3" json:"next_state,omitempty"`
	// output 当天步骤的输出
	Output        string `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendStateSkipRequest) Reset() {
	*x = SendStateSkipRequest{}
	mi := &file_proto_skyflow_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendStateSkipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStateSkipRequest) ProtoMessage() {}

func (x *SendStateSkipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStateSkipRequest.ProtoReflect.Descriptor instead.
func (*SendStateSkipRequest) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{59}
}

func (x *SendStateSkipRequest) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

func (x *SendStateSkipRequest) GetNextState() string {
	if x != nil {
		return x.NextState
	}
	return ""
}

func (x *SendStateSkipRequest) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

// ExtraInfo 附加信息
type GetActivityTaskResponse_ExtraInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State id
	StateId int64 `protobuf:"varint,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	// execution uuid
	ExecutionUuid string `protobuf:"bytes,2,opt,name=execution_uuid,json=executionUuid,proto3" json:"execution_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetActivityTaskResponse_ExtraInfo) Reset() {
	*x = GetActivityTaskResponse_ExtraInfo{}
	mi := &file_proto_skyflow_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActivityTaskResponse_ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityTaskResponse_ExtraInfo) ProtoMessage() {}

func (x *GetActivityTaskResponse_ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_skyflow_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityTaskResponse_ExtraInfo.ProtoReflect.Descriptor instead.
func (*GetActivityTaskResponse_ExtraInfo) Descriptor() ([]byte, []int) {
	return file_proto_skyflow_proto_rawDescGZIP(), []int{51, 0}
}

func (x *GetActivityTaskResponse_ExtraInfo) GetStateId() int64 {
	if x != nil {
		return x.StateId
	}
	return 0
}

func (x *GetActivityTaskResponse_ExtraInfo) GetExecutionUuid() string {
	if x != nil {
		return x.ExecutionUuid
	}
	return ""
}

var File_proto_skyflow_proto protoreflect.FileDescriptor

var file_proto_skyflow_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x72, 0x70,
	0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x0c,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x42, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x20, 0x01, 0x28, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x00, 0x28, 0xe8, 0x07, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x0d, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x20, 0x01, 0x28, 0x64, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x00, 0x28, 0xe8, 0x07, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x20, 0x01, 0x28, 0x64, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x00, 0x28, 0xe8,
	0x07, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x7d, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x17,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x20, 0x01, 0x28, 0xc8, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x55, 0x72, 0x69, 0x22, 0xad, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x55, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x01, 0x28, 0xc8,
	0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x72, 0x69, 0x22, 0x18,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x20, 0x01, 0x28, 0x64, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6b, 0x79,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0c, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x20, 0x01, 0x28, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x20, 0x00, 0x28, 0xe8, 0x07, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x20, 0x01, 0x28, 0x64, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x54, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x20,
	0x01, 0x28, 0xc8, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x55, 0x72, 0x69, 0x22, 0x4d, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x20, 0x01, 0x28, 0xc8, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x72, 0x69, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x01, 0x28, 0xc8, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x20, 0x01, 0x28, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x20, 0x00, 0x28, 0xe8, 0x07, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x20, 0x01, 0x28,
	0x64, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6b, 0x79,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x55, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x55, 0x72, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x02,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x72, 0x69, 0x12, 0x37, 0x0a, 0x17, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x00,
	0x28, 0xc8, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x55, 0x72, 0x69, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x20, 0x00, 0x28, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x20, 0x00, 0x28, 0x64, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x18, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x20, 0x0a, 0x28, 0x64, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x20, 0x0a, 0x28, 0x64, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x6e, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x20, 0x0a, 0x28, 0x64, 0x52, 0x0d, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x20, 0x01, 0x28, 0xc8, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a,
	0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x20, 0x00, 0x28, 0xe8, 0x07, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22,
	0xf6, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x10, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x00, 0x28, 0xc8, 0x01, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x72, 0x69,
	0x12, 0x33, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01,
	0x04, 0x08, 0x00, 0x10, 0x64, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x20, 0x00, 0x28, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3a, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x70,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x20, 0x0a, 0x28, 0x64, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3a, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x66,
	0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6b, 0x79,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x20, 0x01, 0x28, 0xc8, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x55, 0x72, 0x69, 0x22, 0xc2, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x55, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x49, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x4d, 0x0a, 0x09,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x16, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x20, 0x0a, 0x28, 0x64, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x20, 0x0a, 0x28,
	0x64, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x20, 0x01, 0x28, 0xc8, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20,
	0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x20, 0x00, 0x28, 0xe8, 0x07, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x22, 0x6a, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x20, 0x0a, 0x28, 0x64, 0x52, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x01,
	0x28, 0xe8, 0x07, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x18, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x20, 0x0a, 0x28, 0x64, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x01, 0x28, 0xc8, 0x01, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x20, 0x01, 0x28, 0xe8, 0x07, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x5d, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x20, 0x0a, 0x28, 0x64, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x39, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a,
	0x14, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x71, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x6b, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2a, 0xd0, 0x05, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0c, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xf8, 0x55, 0x12, 0x12,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0xf9, 0x55, 0x12, 0x1a, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0xfa, 0x55, 0x12, 0x0f,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x52, 0x49, 0x10, 0xfb, 0x55, 0x12,
	0x1a, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0xe1, 0x5d, 0x12, 0x19, 0x0a, 0x14, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x10, 0xe2, 0x5d, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x10, 0xe3, 0x5d, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x10, 0xe4, 0x5d, 0x12, 0x1b, 0x0a, 0x16, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10,
	0xe5, 0x5d, 0x12, 0x1a, 0x0a, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0xe6, 0x5d, 0x12, 0x1b,
	0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0xc9, 0x65, 0x12, 0x1a, 0x0a, 0x15, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x10, 0xca, 0x65, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xeb, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0xec, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xed, 0x07, 0x12, 0x16, 0x0a, 0x11,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0xee, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xef, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0xf0, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x55, 0x49, 0x44, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x10, 0xf1,
	0x07, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xf2, 0x07, 0x12, 0x15, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0xf3, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xf4, 0x07, 0x12, 0x15,
	0x0a, 0x10, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x73, 0x56, 0x61, 0x69,
	0x6c, 0x64, 0x10, 0xf5, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10,
	0xf6, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0xf7, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x10, 0xf8, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xf9, 0x07, 0x32, 0xc6, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x6b, 0x79,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x40, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x15, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x09, 0x8a, 0xb5, 0x18, 0x05, 0x2f, 0x50, 0x69, 0x6e,
	0x67, 0x32, 0xcb, 0x0d, 0x0a, 0x10, 0x53, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x31, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x6b, 0x79, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x6b, 0x79,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x8a, 0xb5,
	0x18, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x8a, 0xb5, 0x18, 0x1f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6d, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x1e, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x8a, 0xb5, 0x18, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1a, 0x8a, 0xb5, 0x18, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x7d, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x8a, 0xb5, 0x18, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x73,
	0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73,
	0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x8a,
	0xb5, 0x18, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x10, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x2e,
	0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x8a, 0xb5, 0x18, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x6d, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x1e, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x8a, 0xb5, 0x18, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x7d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6b, 0x79, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x8a, 0xb5, 0x18, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x8d,
	0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x2e,
	0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x8a, 0xb5, 0x18, 0x22, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x7d,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x8a,
	0xb5, 0x18, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x79, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x8a, 0xb5, 0x18, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x12, 0x24, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20,
	0x8a, 0xb5, 0x18, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x7d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6b, 0x79,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x8a, 0xb5, 0x18, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42,
	0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b,
	0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2f, 0x73, 0x6b, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x62,
	0x65, 0x6e, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_proto_skyflow_proto_rawDescOnce sync.Once
	file_proto_skyflow_proto_rawDescData []byte
)

func file_proto_skyflow_proto_rawDescGZIP() []byte {
	file_proto_skyflow_proto_rawDescOnce.Do(func() {
		file_proto_skyflow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_skyflow_proto_rawDesc), len(file_proto_skyflow_proto_rawDesc)))
	})
	return file_proto_skyflow_proto_rawDescData
}

var file_proto_skyflow_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_skyflow_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_proto_skyflow_proto_goTypes = []any{
	(ErrorCode)(0),                            // 0: skyflow.ErrorCode
	(*PageRequest)(nil),                       // 1: skyflow.PageRequest
	(*PageResponse)(nil),                      // 2: skyflow.PageResponse
	(*PingResponse)(nil),                      // 3: skyflow.PingResponse
	(*HTTPResponseMessage)(nil),               // 4: skyflow.HTTPResponseMessage
	(*NamespaceListItem)(nil),                 // 5: skyflow.NamespaceListItem
	(*CreateNamespaceRequest)(nil),            // 6: skyflow.CreateNamespaceRequest
	(*CreateNamespaceResponse)(nil),           // 7: skyflow.CreateNamespaceResponse
	(*ListNamespacesRequest)(nil),             // 8: skyflow.ListNamespacesRequest
	(*ListNamespacesResponse)(nil),            // 9: skyflow.ListNamespacesResponse
	(*CreateActivityRequest)(nil),             // 10: skyflow.CreateActivityRequest
	(*CreateActivityResponse)(nil),            // 11: skyflow.CreateActivityResponse
	(*DescribeActivityRequest)(nil),           // 12: skyflow.DescribeActivityRequest
	(*DescribeActivityResponse)(nil),          // 13: skyflow.DescribeActivityResponse
	(*DeleteActivityRequest)(nil),             // 14: skyflow.DeleteActivityRequest
	(*DeleteActivityResponse)(nil),            // 15: skyflow.DeleteActivityResponse
	(*ListActivitiesRequest)(nil),             // 16: skyflow.ListActivitiesRequest
	(*ActivityListItem)(nil),                  // 17: skyflow.ActivityListItem
	(*ListActivitiesResponse)(nil),            // 18: skyflow.ListActivitiesResponse
	(*CreateStateMachineRequest)(nil),         // 19: skyflow.CreateStateMachineRequest
	(*CreateStateMachineResponse)(nil),        // 20: skyflow.CreateStateMachineResponse
	(*DescribeStateMachineRequest)(nil),       // 21: skyflow.DescribeStateMachineRequest
	(*DescribeStateMachineResponse)(nil),      // 22: skyflow.DescribeStateMachineResponse
	(*DeleteStateMachineRequest)(nil),         // 23: skyflow.DeleteStateMachineRequest
	(*DeleteStateMachineResponse)(nil),        // 24: skyflow.DeleteStateMachineResponse
	(*UpdateStateMachineRequest)(nil),         // 25: skyflow.UpdateStateMachineRequest
	(*UpdateStateMachineResponse)(nil),        // 26: skyflow.UpdateStateMachineResponse
	(*ListStateMachinesRequest)(nil),          // 27: skyflow.ListStateMachinesRequest
	(*ListStateMachinesResponse)(nil),         // 28: skyflow.ListStateMachinesResponse
	(*StateMachineListItem)(nil),              // 29: skyflow.StateMachineListItem
	(*ExecutionListItem)(nil),                 // 30: skyflow.ExecutionListItem
	(*StateInfo)(nil),                         // 31: skyflow.StateInfo
	(*ExecutionEventInfo)(nil),                // 32: skyflow.ExecutionEventInfo
	(*ActivityInfo)(nil),                      // 33: skyflow.ActivityInfo
	(*StateMachineInfo)(nil),                  // 34: skyflow.StateMachineInfo
	(*ParseStateMachineRequest)(nil),          // 35: skyflow.ParseStateMachineRequest
	(*ParseStateMachineResponse)(nil),         // 36: skyflow.ParseStateMachineResponse
	(*StartExecutionRequest)(nil),             // 37: skyflow.StartExecutionRequest
	(*StartExecutionResponse)(nil),            // 38: skyflow.StartExecutionResponse
	(*DescribeExecutionRequest)(nil),          // 39: skyflow.DescribeExecutionRequest
	(*DescribeExecutionResponse)(nil),         // 40: skyflow.DescribeExecutionResponse
	(*DescribeExecutionBoneRequest)(nil),      // 41: skyflow.DescribeExecutionBoneRequest
	(*DescribeExecutionBoneResponse)(nil),     // 42: skyflow.DescribeExecutionBoneResponse
	(*StopExecutionRequest)(nil),              // 43: skyflow.StopExecutionRequest
	(*ListExecutionsRequest)(nil),             // 44: skyflow.ListExecutionsRequest
	(*ListExecutionsResponse)(nil),            // 45: skyflow.ListExecutionsResponse
	(*ListExecutionEventsRequest)(nil),        // 46: skyflow.ListExecutionEventsRequest
	(*ListExecutionEventsResponse)(nil),       // 47: skyflow.ListExecutionEventsResponse
	(*DescribeStateRequest)(nil),              // 48: skyflow.DescribeStateRequest
	(*DescribeStateResponse)(nil),             // 49: skyflow.DescribeStateResponse
	(*ListStateEventsRequest)(nil),            // 50: skyflow.ListStateEventsRequest
	(*GetActivityTaskRequest)(nil),            // 51: skyflow.GetActivityTaskRequest
	(*GetActivityTaskResponse)(nil),           // 52: skyflow.GetActivityTaskResponse
	(*SendTaskSuccessRequest)(nil),            // 53: skyflow.SendTaskSuccessRequest
	(*SendTaskFailureRequest)(nil),            // 54: skyflow.SendTaskFailureRequest
	(*SendTaskHeartbeatRequest)(nil),          // 55: skyflow.SendTaskHeartbeatRequest
	(*SendTaskReferenceRequest)(nil),          // 56: skyflow.SendTaskReferenceRequest
	(*StoreTaskDataRequest)(nil),              // 57: skyflow.StoreTaskDataRequest
	(*LoadTaskDataRequest)(nil),               // 58: skyflow.LoadTaskDataRequest
	(*LoadTaskDataResponse)(nil),              // 59: skyflow.LoadTaskDataResponse
	(*SendStateSkipRequest)(nil),              // 60: skyflow.SendStateSkipRequest
	(*GetActivityTaskResponse_ExtraInfo)(nil), // 61: skyflow.GetActivityTaskResponse.ExtraInfo
	(*emptypb.Empty)(nil),                     // 62: google.protobuf.Empty
}
var file_proto_skyflow_proto_depIdxs = []int32{
	1,  // 0: skyflow.ListNamespacesRequest.page_request:type_name -> skyflow.PageRequest
	5,  // 1: skyflow.ListNamespacesResponse.namespaces:type_name -> skyflow.NamespaceListItem
	2,  // 2: skyflow.ListNamespacesResponse.page_response:type_name -> skyflow.PageResponse
	1,  // 3: skyflow.ListActivitiesRequest.page_request:type_name -> skyflow.PageRequest
	17, // 4: skyflow.ListActivitiesResponse.activities:type_name -> skyflow.ActivityListItem
	2,  // 5: skyflow.ListActivitiesResponse.page_response:type_name -> skyflow.PageResponse
	34, // 6: skyflow.CreateStateMachineResponse.data:type_name -> skyflow.StateMachineInfo
	34, // 7: skyflow.DescribeStateMachineResponse.data:type_name -> skyflow.StateMachineInfo
	1,  // 8: skyflow.ListStateMachinesRequest.page_request:type_name -> skyflow.PageRequest
	29, // 9: skyflow.ListStateMachinesResponse.statemachines:type_name -> skyflow.StateMachineListItem
	2,  // 10: skyflow.ListStateMachinesResponse.page_response:type_name -> skyflow.PageResponse
	1,  // 11: skyflow.ListExecutionsRequest.page_request:type_name -> skyflow.PageRequest
	30, // 12: skyflow.ListExecutionsResponse.executions:type_name -> skyflow.ExecutionListItem
	2,  // 13: skyflow.ListExecutionsResponse.page_response:type_name -> skyflow.PageResponse
	1,  // 14: skyflow.ListExecutionEventsRequest.page_request:type_name -> skyflow.PageRequest
	32, // 15: skyflow.ListExecutionEventsResponse.data:type_name -> skyflow.ExecutionEventInfo
	2,  // 16: skyflow.ListExecutionEventsResponse.page_response:type_name -> skyflow.PageResponse
	31, // 17: skyflow.DescribeStateResponse.data:type_name -> skyflow.StateInfo
	1,  // 18: skyflow.ListStateEventsRequest.page_request:type_name -> skyflow.PageRequest
	61, // 19: skyflow.GetActivityTaskResponse.extra_info:type_name -> skyflow.GetActivityTaskResponse.ExtraInfo
	1,  // 20: skyflow.CommonService.Paging:input_type -> skyflow.PageRequest
	62, // 21: skyflow.CommonService.HTTP:input_type -> google.protobuf.Empty
	62, // 22: skyflow.CommonService.Ping:input_type -> google.protobuf.Empty
	6,  // 23: skyflow.SkyflowV1Service.CreateNamespace:input_type -> skyflow.CreateNamespaceRequest
	6,  // 24: skyflow.SkyflowV1Service.CreateOrUpdateNamespace:input_type -> skyflow.CreateNamespaceRequest
	8,  // 25: skyflow.SkyflowV1Service.ListNamespaces:input_type -> skyflow.ListNamespacesRequest
	10, // 26: skyflow.SkyflowV1Service.CreateActivity:input_type -> skyflow.CreateActivityRequest
	10, // 27: skyflow.SkyflowV1Service.CreateOrUpdateActivity:input_type -> skyflow.CreateActivityRequest
	16, // 28: skyflow.SkyflowV1Service.ListActivities:input_type -> skyflow.ListActivitiesRequest
	12, // 29: skyflow.SkyflowV1Service.DescribeActivity:input_type -> skyflow.DescribeActivityRequest
	14, // 30: skyflow.SkyflowV1Service.DeleteActivity:input_type -> skyflow.DeleteActivityRequest
	19, // 31: skyflow.SkyflowV1Service.CreateStateMachine:input_type -> skyflow.CreateStateMachineRequest
	19, // 32: skyflow.SkyflowV1Service.CreateOrUpdateStateMachine:input_type -> skyflow.CreateStateMachineRequest
	23, // 33: skyflow.SkyflowV1Service.DeleteStateMachine:input_type -> skyflow.DeleteStateMachineRequest
	27, // 34: skyflow.SkyflowV1Service.ListStateMachines:input_type -> skyflow.ListStateMachinesRequest
	21, // 35: skyflow.SkyflowV1Service.DescribeStateMachine:input_type -> skyflow.DescribeStateMachineRequest
	25, // 36: skyflow.SkyflowV1Service.UpdateStateMachine:input_type -> skyflow.UpdateStateMachineRequest
	2,  // 37: skyflow.CommonService.Paging:output_type -> skyflow.PageResponse
	4,  // 38: skyflow.CommonService.HTTP:output_type -> skyflow.HTTPResponseMessage
	3,  // 39: skyflow.CommonService.Ping:output_type -> skyflow.PingResponse
	7,  // 40: skyflow.SkyflowV1Service.CreateNamespace:output_type -> skyflow.CreateNamespaceResponse
	7,  // 41: skyflow.SkyflowV1Service.CreateOrUpdateNamespace:output_type -> skyflow.CreateNamespaceResponse
	9,  // 42: skyflow.SkyflowV1Service.ListNamespaces:output_type -> skyflow.ListNamespacesResponse
	11, // 43: skyflow.SkyflowV1Service.CreateActivity:output_type -> skyflow.CreateActivityResponse
	11, // 44: skyflow.SkyflowV1Service.CreateOrUpdateActivity:output_type -> skyflow.CreateActivityResponse
	18, // 45: skyflow.SkyflowV1Service.ListActivities:output_type -> skyflow.ListActivitiesResponse
	13, // 46: skyflow.SkyflowV1Service.DescribeActivity:output_type -> skyflow.DescribeActivityResponse
	15, // 47: skyflow.SkyflowV1Service.DeleteActivity:output_type -> skyflow.DeleteActivityResponse
	20, // 48: skyflow.SkyflowV1Service.CreateStateMachine:output_type -> skyflow.CreateStateMachineResponse
	20, // 49: skyflow.SkyflowV1Service.CreateOrUpdateStateMachine:output_type -> skyflow.CreateStateMachineResponse
	24, // 50: skyflow.SkyflowV1Service.DeleteStateMachine:output_type -> skyflow.DeleteStateMachineResponse
	28, // 51: skyflow.SkyflowV1Service.ListStateMachines:output_type -> skyflow.ListStateMachinesResponse
	22, // 52: skyflow.SkyflowV1Service.DescribeStateMachine:output_type -> skyflow.DescribeStateMachineResponse
	26, // 53: skyflow.SkyflowV1Service.UpdateStateMachine:output_type -> skyflow.UpdateStateMachineResponse
	37, // [37:54] is the sub-list for method output_type
	20, // [20:37] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_skyflow_proto_init() }
func file_proto_skyflow_proto_init() {
	if File_proto_skyflow_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_skyflow_proto_rawDesc), len(file_proto_skyflow_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_skyflow_proto_goTypes,
		DependencyIndexes: file_proto_skyflow_proto_depIdxs,
		EnumInfos:         file_proto_skyflow_proto_enumTypes,
		MessageInfos:      file_proto_skyflow_proto_msgTypes,
	}.Build()
	File_proto_skyflow_proto = out.File
	file_proto_skyflow_proto_goTypes = nil
	file_proto_skyflow_proto_depIdxs = nil
}
