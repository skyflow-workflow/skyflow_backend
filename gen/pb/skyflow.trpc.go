// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: proto/skyflow.proto

package pb

import (
	"context"
	"errors"
	"fmt"

	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// CommonServiceService defines service.
type CommonServiceService interface {
	// Paging Paging 分页格式
	Paging(ctx context.Context, req *PageRequest) (*PageResponse, error)
	// HTTP HTTPReturn  HTTP API接口返回值格式
	HTTP(ctx context.Context, req *emptypb.Empty) (*HTTPResponseMessage, error)
	// Ping Ping ping service
	Ping(ctx context.Context, req *emptypb.Empty) (*PingResponse, error)
}

func CommonServiceService_Paging_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &PageRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CommonServiceService).Paging(ctx, reqbody.(*PageRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func CommonServiceService_HTTP_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &emptypb.Empty{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CommonServiceService).HTTP(ctx, reqbody.(*emptypb.Empty))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func CommonServiceService_Ping_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &emptypb.Empty{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CommonServiceService).Ping(ctx, reqbody.(*emptypb.Empty))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// CommonServiceServer_ServiceDesc descriptor for server.RegisterService.
var CommonServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "skyflow.CommonService",
	HandlerType: ((*CommonServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/skyflow.CommonService/Paging",
			Func: CommonServiceService_Paging_Handler,
		},
		{
			Name: "/skyflow.CommonService/HTTP",
			Func: CommonServiceService_HTTP_Handler,
		},
		{
			Name: "/Ping",
			Func: CommonServiceService_Ping_Handler,
		},
		{
			Name: "/skyflow.CommonService/Ping",
			Func: CommonServiceService_Ping_Handler,
		},
	},
}

// RegisterCommonServiceService registers service.
func RegisterCommonServiceService(s server.Service, svr CommonServiceService) {
	if err := s.Register(&CommonServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("CommonService register error:%v", err))
	}
}

// SkyflowV1ServiceService defines service.
type SkyflowV1ServiceService interface {
	// CreateNamespace CreateNamespace 创建一个命名空间
	CreateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	// CreateOrUpdateNamespace CreateOrUpdateNamespace 创建/更新一个命名空间
	CreateOrUpdateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	// ListNamespaces ListNamespaces 获得命名空间列表
	ListNamespaces(ctx context.Context, req *ListNamespacesRequest) (*ListNamespacesResponse, error)
	// CreateActivity CreateActivity 创建一个活动
	CreateActivity(ctx context.Context, req *CreateActivityRequest) (*CreateActivityResponse, error)
	// CreateOrUpdateActivity CreateOrUpdateActivity 创建/更新一个活动
	CreateOrUpdateActivity(ctx context.Context, req *CreateActivityRequest) (*CreateActivityResponse, error)
	// ListActivities ListActivities 获得活动列表
	ListActivities(ctx context.Context, req *ListActivitiesRequest) (*ListActivitiesResponse, error)
	// DescribeActivity DescribeActivity 获得一个活动的描述
	DescribeActivity(ctx context.Context, req *DescribeActivityRequest) (*DescribeActivityResponse, error)
	// DeleteActivity DeleteActivity 删除一个活动
	DeleteActivity(ctx context.Context, req *DeleteActivityRequest) (*DeleteActivityResponse, error)
	// CreateStateMachine CreateStateMachine 创建一个工作流
	CreateStateMachine(ctx context.Context, req *CreateStateMachineRequest) (*CreateStateMachineResponse, error)
	// CreateOrUpdateStateMachine CreateOrUpdateStateMachine 创建/更新一个工作流
	CreateOrUpdateStateMachine(ctx context.Context, req *CreateStateMachineRequest) (*CreateStateMachineResponse, error)
	// DeleteStateMachine DeleteStateMachine 删除一个工作流
	DeleteStateMachine(ctx context.Context, req *DeleteStateMachineRequest) (*DeleteStateMachineResponse, error)
	// ListStateMachines ListStateMachines 获得工作流列表
	ListStateMachines(ctx context.Context, req *ListStateMachinesRequest) (*ListStateMachinesResponse, error)
	// DescribeStateMachine DescribeStateMachine 获得一个工作流的描述
	DescribeStateMachine(ctx context.Context, req *DescribeStateMachineRequest) (*DescribeStateMachineResponse, error)
	// UpdateStateMachine UpdateStateMachine 更新一个工作流
	UpdateStateMachine(ctx context.Context, req *UpdateStateMachineRequest) (*UpdateStateMachineResponse, error)
}

func SkyflowV1ServiceService_CreateNamespace_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateNamespaceRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).CreateNamespace(ctx, reqbody.(*CreateNamespaceRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_CreateOrUpdateNamespace_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateNamespaceRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).CreateOrUpdateNamespace(ctx, reqbody.(*CreateNamespaceRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_ListNamespaces_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ListNamespacesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).ListNamespaces(ctx, reqbody.(*ListNamespacesRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_CreateActivity_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateActivityRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).CreateActivity(ctx, reqbody.(*CreateActivityRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_CreateOrUpdateActivity_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateActivityRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).CreateOrUpdateActivity(ctx, reqbody.(*CreateActivityRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_ListActivities_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ListActivitiesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).ListActivities(ctx, reqbody.(*ListActivitiesRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_DescribeActivity_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeActivityRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).DescribeActivity(ctx, reqbody.(*DescribeActivityRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_DeleteActivity_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteActivityRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).DeleteActivity(ctx, reqbody.(*DeleteActivityRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_CreateStateMachine_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateStateMachineRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).CreateStateMachine(ctx, reqbody.(*CreateStateMachineRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_CreateOrUpdateStateMachine_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &CreateStateMachineRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).CreateOrUpdateStateMachine(ctx, reqbody.(*CreateStateMachineRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_DeleteStateMachine_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DeleteStateMachineRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).DeleteStateMachine(ctx, reqbody.(*DeleteStateMachineRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_ListStateMachines_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ListStateMachinesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).ListStateMachines(ctx, reqbody.(*ListStateMachinesRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_DescribeStateMachine_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &DescribeStateMachineRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).DescribeStateMachine(ctx, reqbody.(*DescribeStateMachineRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func SkyflowV1ServiceService_UpdateStateMachine_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateStateMachineRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SkyflowV1ServiceService).UpdateStateMachine(ctx, reqbody.(*UpdateStateMachineRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// SkyflowV1ServiceServer_ServiceDesc descriptor for server.RegisterService.
var SkyflowV1ServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "skyflow.SkyflowV1Service",
	HandlerType: ((*SkyflowV1ServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/api/v1/CreateNamespace",
			Func: SkyflowV1ServiceService_CreateNamespace_Handler,
		},
		{
			Name: "/api/v1/CreateOrUpdateNamespace",
			Func: SkyflowV1ServiceService_CreateOrUpdateNamespace_Handler,
		},
		{
			Name: "/api/v1/ListNamespaces",
			Func: SkyflowV1ServiceService_ListNamespaces_Handler,
		},
		{
			Name: "/api/v1/CreateActivity",
			Func: SkyflowV1ServiceService_CreateActivity_Handler,
		},
		{
			Name: "/api/v1/CreateOrUpdateActivity",
			Func: SkyflowV1ServiceService_CreateOrUpdateActivity_Handler,
		},
		{
			Name: "/api/v1/ListActivities",
			Func: SkyflowV1ServiceService_ListActivities_Handler,
		},
		{
			Name: "/api/v1/DescribeActivity",
			Func: SkyflowV1ServiceService_DescribeActivity_Handler,
		},
		{
			Name: "/api/v1/DeleteActivity",
			Func: SkyflowV1ServiceService_DeleteActivity_Handler,
		},
		{
			Name: "/api/v1/CreateStateMachine",
			Func: SkyflowV1ServiceService_CreateStateMachine_Handler,
		},
		{
			Name: "/api/v1/CreateOrUpdateStateMachine",
			Func: SkyflowV1ServiceService_CreateOrUpdateStateMachine_Handler,
		},
		{
			Name: "/api/v1/DeleteStateMachine",
			Func: SkyflowV1ServiceService_DeleteStateMachine_Handler,
		},
		{
			Name: "/api/v1/ListStateMachines",
			Func: SkyflowV1ServiceService_ListStateMachines_Handler,
		},
		{
			Name: "/api/v1/DescribeStateMachine",
			Func: SkyflowV1ServiceService_DescribeStateMachine_Handler,
		},
		{
			Name: "/api/v1/UpdateStateMachine",
			Func: SkyflowV1ServiceService_UpdateStateMachine_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/CreateNamespace",
			Func: SkyflowV1ServiceService_CreateNamespace_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/CreateOrUpdateNamespace",
			Func: SkyflowV1ServiceService_CreateOrUpdateNamespace_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/ListNamespaces",
			Func: SkyflowV1ServiceService_ListNamespaces_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/CreateActivity",
			Func: SkyflowV1ServiceService_CreateActivity_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/CreateOrUpdateActivity",
			Func: SkyflowV1ServiceService_CreateOrUpdateActivity_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/ListActivities",
			Func: SkyflowV1ServiceService_ListActivities_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/DescribeActivity",
			Func: SkyflowV1ServiceService_DescribeActivity_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/DeleteActivity",
			Func: SkyflowV1ServiceService_DeleteActivity_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/CreateStateMachine",
			Func: SkyflowV1ServiceService_CreateStateMachine_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/CreateOrUpdateStateMachine",
			Func: SkyflowV1ServiceService_CreateOrUpdateStateMachine_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/DeleteStateMachine",
			Func: SkyflowV1ServiceService_DeleteStateMachine_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/ListStateMachines",
			Func: SkyflowV1ServiceService_ListStateMachines_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/DescribeStateMachine",
			Func: SkyflowV1ServiceService_DescribeStateMachine_Handler,
		},
		{
			Name: "/skyflow.SkyflowV1Service/UpdateStateMachine",
			Func: SkyflowV1ServiceService_UpdateStateMachine_Handler,
		},
	},
}

// RegisterSkyflowV1ServiceService registers service.
func RegisterSkyflowV1ServiceService(s server.Service, svr SkyflowV1ServiceService) {
	if err := s.Register(&SkyflowV1ServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("SkyflowV1Service register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedCommonService struct{}

// Paging Paging 分页格式
func (s *UnimplementedCommonService) Paging(ctx context.Context, req *PageRequest) (*PageResponse, error) {
	return nil, errors.New("rpc Paging of service CommonService is not implemented")
}

// HTTP HTTPReturn  HTTP API接口返回值格式
func (s *UnimplementedCommonService) HTTP(ctx context.Context, req *emptypb.Empty) (*HTTPResponseMessage, error) {
	return nil, errors.New("rpc HTTP of service CommonService is not implemented")
}

// Ping Ping ping service
func (s *UnimplementedCommonService) Ping(ctx context.Context, req *emptypb.Empty) (*PingResponse, error) {
	return nil, errors.New("rpc Ping of service CommonService is not implemented")
}

type UnimplementedSkyflowV1Service struct{}

// CreateNamespace CreateNamespace 创建一个命名空间
func (s *UnimplementedSkyflowV1Service) CreateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, errors.New("rpc CreateNamespace of service SkyflowV1Service is not implemented")
}

// CreateOrUpdateNamespace CreateOrUpdateNamespace 创建/更新一个命名空间
func (s *UnimplementedSkyflowV1Service) CreateOrUpdateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, errors.New("rpc CreateOrUpdateNamespace of service SkyflowV1Service is not implemented")
}

// ListNamespaces ListNamespaces 获得命名空间列表
func (s *UnimplementedSkyflowV1Service) ListNamespaces(ctx context.Context, req *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, errors.New("rpc ListNamespaces of service SkyflowV1Service is not implemented")
}

// CreateActivity CreateActivity 创建一个活动
func (s *UnimplementedSkyflowV1Service) CreateActivity(ctx context.Context, req *CreateActivityRequest) (*CreateActivityResponse, error) {
	return nil, errors.New("rpc CreateActivity of service SkyflowV1Service is not implemented")
}

// CreateOrUpdateActivity CreateOrUpdateActivity 创建/更新一个活动
func (s *UnimplementedSkyflowV1Service) CreateOrUpdateActivity(ctx context.Context, req *CreateActivityRequest) (*CreateActivityResponse, error) {
	return nil, errors.New("rpc CreateOrUpdateActivity of service SkyflowV1Service is not implemented")
}

// ListActivities ListActivities 获得活动列表
func (s *UnimplementedSkyflowV1Service) ListActivities(ctx context.Context, req *ListActivitiesRequest) (*ListActivitiesResponse, error) {
	return nil, errors.New("rpc ListActivities of service SkyflowV1Service is not implemented")
}

// DescribeActivity DescribeActivity 获得一个活动的描述
func (s *UnimplementedSkyflowV1Service) DescribeActivity(ctx context.Context, req *DescribeActivityRequest) (*DescribeActivityResponse, error) {
	return nil, errors.New("rpc DescribeActivity of service SkyflowV1Service is not implemented")
}

// DeleteActivity DeleteActivity 删除一个活动
func (s *UnimplementedSkyflowV1Service) DeleteActivity(ctx context.Context, req *DeleteActivityRequest) (*DeleteActivityResponse, error) {
	return nil, errors.New("rpc DeleteActivity of service SkyflowV1Service is not implemented")
}

// CreateStateMachine CreateStateMachine 创建一个工作流
func (s *UnimplementedSkyflowV1Service) CreateStateMachine(ctx context.Context, req *CreateStateMachineRequest) (*CreateStateMachineResponse, error) {
	return nil, errors.New("rpc CreateStateMachine of service SkyflowV1Service is not implemented")
}

// CreateOrUpdateStateMachine CreateOrUpdateStateMachine 创建/更新一个工作流
func (s *UnimplementedSkyflowV1Service) CreateOrUpdateStateMachine(ctx context.Context, req *CreateStateMachineRequest) (*CreateStateMachineResponse, error) {
	return nil, errors.New("rpc CreateOrUpdateStateMachine of service SkyflowV1Service is not implemented")
}

// DeleteStateMachine DeleteStateMachine 删除一个工作流
func (s *UnimplementedSkyflowV1Service) DeleteStateMachine(ctx context.Context, req *DeleteStateMachineRequest) (*DeleteStateMachineResponse, error) {
	return nil, errors.New("rpc DeleteStateMachine of service SkyflowV1Service is not implemented")
}

// ListStateMachines ListStateMachines 获得工作流列表
func (s *UnimplementedSkyflowV1Service) ListStateMachines(ctx context.Context, req *ListStateMachinesRequest) (*ListStateMachinesResponse, error) {
	return nil, errors.New("rpc ListStateMachines of service SkyflowV1Service is not implemented")
}

// DescribeStateMachine DescribeStateMachine 获得一个工作流的描述
func (s *UnimplementedSkyflowV1Service) DescribeStateMachine(ctx context.Context, req *DescribeStateMachineRequest) (*DescribeStateMachineResponse, error) {
	return nil, errors.New("rpc DescribeStateMachine of service SkyflowV1Service is not implemented")
}

// UpdateStateMachine UpdateStateMachine 更新一个工作流
func (s *UnimplementedSkyflowV1Service) UpdateStateMachine(ctx context.Context, req *UpdateStateMachineRequest) (*UpdateStateMachineResponse, error) {
	return nil, errors.New("rpc UpdateStateMachine of service SkyflowV1Service is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// CommonServiceClientProxy defines service client proxy
type CommonServiceClientProxy interface {
	// Paging Paging 分页格式
	Paging(ctx context.Context, req *PageRequest, opts ...client.Option) (rsp *PageResponse, err error)
	// HTTP HTTPReturn  HTTP API接口返回值格式
	HTTP(ctx context.Context, req *emptypb.Empty, opts ...client.Option) (rsp *HTTPResponseMessage, err error)
	// Ping Ping ping service
	Ping(ctx context.Context, req *emptypb.Empty, opts ...client.Option) (rsp *PingResponse, err error)
}

type CommonServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewCommonServiceClientProxy = func(opts ...client.Option) CommonServiceClientProxy {
	return &CommonServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *CommonServiceClientProxyImpl) Paging(ctx context.Context, req *PageRequest, opts ...client.Option) (*PageResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/skyflow.CommonService/Paging")
	msg.WithCalleeServiceName(CommonServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("CommonService")
	msg.WithCalleeMethod("Paging")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &PageResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *CommonServiceClientProxyImpl) HTTP(ctx context.Context, req *emptypb.Empty, opts ...client.Option) (*HTTPResponseMessage, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/skyflow.CommonService/HTTP")
	msg.WithCalleeServiceName(CommonServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("CommonService")
	msg.WithCalleeMethod("HTTP")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &HTTPResponseMessage{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *CommonServiceClientProxyImpl) Ping(ctx context.Context, req *emptypb.Empty, opts ...client.Option) (*PingResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/Ping")
	msg.WithCalleeServiceName(CommonServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("CommonService")
	msg.WithCalleeMethod("Ping")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &PingResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// SkyflowV1ServiceClientProxy defines service client proxy
type SkyflowV1ServiceClientProxy interface {
	// CreateNamespace CreateNamespace 创建一个命名空间
	CreateNamespace(ctx context.Context, req *CreateNamespaceRequest, opts ...client.Option) (rsp *CreateNamespaceResponse, err error)
	// CreateOrUpdateNamespace CreateOrUpdateNamespace 创建/更新一个命名空间
	CreateOrUpdateNamespace(ctx context.Context, req *CreateNamespaceRequest, opts ...client.Option) (rsp *CreateNamespaceResponse, err error)
	// ListNamespaces ListNamespaces 获得命名空间列表
	ListNamespaces(ctx context.Context, req *ListNamespacesRequest, opts ...client.Option) (rsp *ListNamespacesResponse, err error)
	// CreateActivity CreateActivity 创建一个活动
	CreateActivity(ctx context.Context, req *CreateActivityRequest, opts ...client.Option) (rsp *CreateActivityResponse, err error)
	// CreateOrUpdateActivity CreateOrUpdateActivity 创建/更新一个活动
	CreateOrUpdateActivity(ctx context.Context, req *CreateActivityRequest, opts ...client.Option) (rsp *CreateActivityResponse, err error)
	// ListActivities ListActivities 获得活动列表
	ListActivities(ctx context.Context, req *ListActivitiesRequest, opts ...client.Option) (rsp *ListActivitiesResponse, err error)
	// DescribeActivity DescribeActivity 获得一个活动的描述
	DescribeActivity(ctx context.Context, req *DescribeActivityRequest, opts ...client.Option) (rsp *DescribeActivityResponse, err error)
	// DeleteActivity DeleteActivity 删除一个活动
	DeleteActivity(ctx context.Context, req *DeleteActivityRequest, opts ...client.Option) (rsp *DeleteActivityResponse, err error)
	// CreateStateMachine CreateStateMachine 创建一个工作流
	CreateStateMachine(ctx context.Context, req *CreateStateMachineRequest, opts ...client.Option) (rsp *CreateStateMachineResponse, err error)
	// CreateOrUpdateStateMachine CreateOrUpdateStateMachine 创建/更新一个工作流
	CreateOrUpdateStateMachine(ctx context.Context, req *CreateStateMachineRequest, opts ...client.Option) (rsp *CreateStateMachineResponse, err error)
	// DeleteStateMachine DeleteStateMachine 删除一个工作流
	DeleteStateMachine(ctx context.Context, req *DeleteStateMachineRequest, opts ...client.Option) (rsp *DeleteStateMachineResponse, err error)
	// ListStateMachines ListStateMachines 获得工作流列表
	ListStateMachines(ctx context.Context, req *ListStateMachinesRequest, opts ...client.Option) (rsp *ListStateMachinesResponse, err error)
	// DescribeStateMachine DescribeStateMachine 获得一个工作流的描述
	DescribeStateMachine(ctx context.Context, req *DescribeStateMachineRequest, opts ...client.Option) (rsp *DescribeStateMachineResponse, err error)
	// UpdateStateMachine UpdateStateMachine 更新一个工作流
	UpdateStateMachine(ctx context.Context, req *UpdateStateMachineRequest, opts ...client.Option) (rsp *UpdateStateMachineResponse, err error)
}

type SkyflowV1ServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewSkyflowV1ServiceClientProxy = func(opts ...client.Option) SkyflowV1ServiceClientProxy {
	return &SkyflowV1ServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *SkyflowV1ServiceClientProxyImpl) CreateNamespace(ctx context.Context, req *CreateNamespaceRequest, opts ...client.Option) (*CreateNamespaceResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/CreateNamespace")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("CreateNamespace")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateNamespaceResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) CreateOrUpdateNamespace(ctx context.Context, req *CreateNamespaceRequest, opts ...client.Option) (*CreateNamespaceResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/CreateOrUpdateNamespace")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("CreateOrUpdateNamespace")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateNamespaceResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) ListNamespaces(ctx context.Context, req *ListNamespacesRequest, opts ...client.Option) (*ListNamespacesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/ListNamespaces")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("ListNamespaces")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ListNamespacesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) CreateActivity(ctx context.Context, req *CreateActivityRequest, opts ...client.Option) (*CreateActivityResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/CreateActivity")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("CreateActivity")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateActivityResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) CreateOrUpdateActivity(ctx context.Context, req *CreateActivityRequest, opts ...client.Option) (*CreateActivityResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/CreateOrUpdateActivity")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("CreateOrUpdateActivity")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateActivityResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) ListActivities(ctx context.Context, req *ListActivitiesRequest, opts ...client.Option) (*ListActivitiesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/ListActivities")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("ListActivities")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ListActivitiesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) DescribeActivity(ctx context.Context, req *DescribeActivityRequest, opts ...client.Option) (*DescribeActivityResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/DescribeActivity")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("DescribeActivity")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeActivityResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) DeleteActivity(ctx context.Context, req *DeleteActivityRequest, opts ...client.Option) (*DeleteActivityResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/DeleteActivity")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("DeleteActivity")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DeleteActivityResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) CreateStateMachine(ctx context.Context, req *CreateStateMachineRequest, opts ...client.Option) (*CreateStateMachineResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/CreateStateMachine")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("CreateStateMachine")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateStateMachineResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) CreateOrUpdateStateMachine(ctx context.Context, req *CreateStateMachineRequest, opts ...client.Option) (*CreateStateMachineResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/CreateOrUpdateStateMachine")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("CreateOrUpdateStateMachine")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &CreateStateMachineResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) DeleteStateMachine(ctx context.Context, req *DeleteStateMachineRequest, opts ...client.Option) (*DeleteStateMachineResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/DeleteStateMachine")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("DeleteStateMachine")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DeleteStateMachineResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) ListStateMachines(ctx context.Context, req *ListStateMachinesRequest, opts ...client.Option) (*ListStateMachinesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/ListStateMachines")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("ListStateMachines")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ListStateMachinesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) DescribeStateMachine(ctx context.Context, req *DescribeStateMachineRequest, opts ...client.Option) (*DescribeStateMachineResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/DescribeStateMachine")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("DescribeStateMachine")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &DescribeStateMachineResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *SkyflowV1ServiceClientProxyImpl) UpdateStateMachine(ctx context.Context, req *UpdateStateMachineRequest, opts ...client.Option) (*UpdateStateMachineResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/api/v1/UpdateStateMachine")
	msg.WithCalleeServiceName(SkyflowV1ServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SkyflowV1Service")
	msg.WithCalleeMethod("UpdateStateMachine")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &UpdateStateMachineResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
