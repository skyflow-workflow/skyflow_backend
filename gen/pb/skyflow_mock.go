// Code generated by MockGen. DO NOT EDIT.
// Source: skyflow.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=skyflow_mock.go -package=pb --source=skyflow.trpc.go -self_package=github.com/skyflow-StateMachine/skyflow_backbend/gen/pb
//

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockCommonServiceService is a mock of CommonServiceService interface.
type MockCommonServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockCommonServiceServiceMockRecorder
	isgomock struct{}
}

// MockCommonServiceServiceMockRecorder is the mock recorder for MockCommonServiceService.
type MockCommonServiceServiceMockRecorder struct {
	mock *MockCommonServiceService
}

// NewMockCommonServiceService creates a new mock instance.
func NewMockCommonServiceService(ctrl *gomock.Controller) *MockCommonServiceService {
	mock := &MockCommonServiceService{ctrl: ctrl}
	mock.recorder = &MockCommonServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonServiceService) EXPECT() *MockCommonServiceServiceMockRecorder {
	return m.recorder
}

// HTTP mocks base method.
func (m *MockCommonServiceService) HTTP(ctx context.Context, req *emptypb.Empty) (*HTTPResponseMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTP", ctx, req)
	ret0, _ := ret[0].(*HTTPResponseMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTTP indicates an expected call of HTTP.
func (mr *MockCommonServiceServiceMockRecorder) HTTP(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTP", reflect.TypeOf((*MockCommonServiceService)(nil).HTTP), ctx, req)
}

// Paging mocks base method.
func (m *MockCommonServiceService) Paging(ctx context.Context, req *PageRequest) (*PageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paging", ctx, req)
	ret0, _ := ret[0].(*PageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paging indicates an expected call of Paging.
func (mr *MockCommonServiceServiceMockRecorder) Paging(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paging", reflect.TypeOf((*MockCommonServiceService)(nil).Paging), ctx, req)
}

// Ping mocks base method.
func (m *MockCommonServiceService) Ping(ctx context.Context, req *emptypb.Empty) (*PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, req)
	ret0, _ := ret[0].(*PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockCommonServiceServiceMockRecorder) Ping(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCommonServiceService)(nil).Ping), ctx, req)
}

// MockSkyflowServiceService is a mock of SkyflowServiceService interface.
type MockSkyflowServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockSkyflowServiceServiceMockRecorder
	isgomock struct{}
}

// MockSkyflowServiceServiceMockRecorder is the mock recorder for MockSkyflowServiceService.
type MockSkyflowServiceServiceMockRecorder struct {
	mock *MockSkyflowServiceService
}

// NewMockSkyflowServiceService creates a new mock instance.
func NewMockSkyflowServiceService(ctrl *gomock.Controller) *MockSkyflowServiceService {
	mock := &MockSkyflowServiceService{ctrl: ctrl}
	mock.recorder = &MockSkyflowServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkyflowServiceService) EXPECT() *MockSkyflowServiceServiceMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method.
func (m *MockSkyflowServiceService) CreateActivity(ctx context.Context, req *CreateActivityRequest) (*CreateActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActivity", ctx, req)
	ret0, _ := ret[0].(*CreateActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockSkyflowServiceServiceMockRecorder) CreateActivity(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockSkyflowServiceService)(nil).CreateActivity), ctx, req)
}

// CreateNamespace mocks base method.
func (m *MockSkyflowServiceService) CreateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", ctx, req)
	ret0, _ := ret[0].(*CreateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockSkyflowServiceServiceMockRecorder) CreateNamespace(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockSkyflowServiceService)(nil).CreateNamespace), ctx, req)
}

// CreateOrUpdateActivity mocks base method.
func (m *MockSkyflowServiceService) CreateOrUpdateActivity(ctx context.Context, req *CreateActivityRequest) (*CreateActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateActivity", ctx, req)
	ret0, _ := ret[0].(*CreateActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateActivity indicates an expected call of CreateOrUpdateActivity.
func (mr *MockSkyflowServiceServiceMockRecorder) CreateOrUpdateActivity(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateActivity", reflect.TypeOf((*MockSkyflowServiceService)(nil).CreateOrUpdateActivity), ctx, req)
}

// CreateOrUpdateNamespace mocks base method.
func (m *MockSkyflowServiceService) CreateOrUpdateNamespace(ctx context.Context, req *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateNamespace", ctx, req)
	ret0, _ := ret[0].(*CreateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateNamespace indicates an expected call of CreateOrUpdateNamespace.
func (mr *MockSkyflowServiceServiceMockRecorder) CreateOrUpdateNamespace(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateNamespace", reflect.TypeOf((*MockSkyflowServiceService)(nil).CreateOrUpdateNamespace), ctx, req)
}

// DescribeActivity mocks base method.
func (m *MockSkyflowServiceService) DescribeActivity(ctx context.Context, req *DescribeActivityRequest) (*DescribeActivityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeActivity", ctx, req)
	ret0, _ := ret[0].(*DescribeActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActivity indicates an expected call of DescribeActivity.
func (mr *MockSkyflowServiceServiceMockRecorder) DescribeActivity(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActivity", reflect.TypeOf((*MockSkyflowServiceService)(nil).DescribeActivity), ctx, req)
}

// ListActivities mocks base method.
func (m *MockSkyflowServiceService) ListActivities(ctx context.Context, req *ListActivitiesRequest) (*ListActivitiesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActivities", ctx, req)
	ret0, _ := ret[0].(*ListActivitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivities indicates an expected call of ListActivities.
func (mr *MockSkyflowServiceServiceMockRecorder) ListActivities(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivities", reflect.TypeOf((*MockSkyflowServiceService)(nil).ListActivities), ctx, req)
}

// ListNamespaces mocks base method.
func (m *MockSkyflowServiceService) ListNamespaces(ctx context.Context, req *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces", ctx, req)
	ret0, _ := ret[0].(*ListNamespacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockSkyflowServiceServiceMockRecorder) ListNamespaces(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockSkyflowServiceService)(nil).ListNamespaces), ctx, req)
}

// MockCommonServiceClientProxy is a mock of CommonServiceClientProxy interface.
type MockCommonServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockCommonServiceClientProxyMockRecorder
	isgomock struct{}
}

// MockCommonServiceClientProxyMockRecorder is the mock recorder for MockCommonServiceClientProxy.
type MockCommonServiceClientProxyMockRecorder struct {
	mock *MockCommonServiceClientProxy
}

// NewMockCommonServiceClientProxy creates a new mock instance.
func NewMockCommonServiceClientProxy(ctrl *gomock.Controller) *MockCommonServiceClientProxy {
	mock := &MockCommonServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockCommonServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonServiceClientProxy) EXPECT() *MockCommonServiceClientProxyMockRecorder {
	return m.recorder
}

// HTTP mocks base method.
func (m *MockCommonServiceClientProxy) HTTP(ctx context.Context, req *emptypb.Empty, opts ...client.Option) (*HTTPResponseMessage, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HTTP", varargs...)
	ret0, _ := ret[0].(*HTTPResponseMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTTP indicates an expected call of HTTP.
func (mr *MockCommonServiceClientProxyMockRecorder) HTTP(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTP", reflect.TypeOf((*MockCommonServiceClientProxy)(nil).HTTP), varargs...)
}

// Paging mocks base method.
func (m *MockCommonServiceClientProxy) Paging(ctx context.Context, req *PageRequest, opts ...client.Option) (*PageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Paging", varargs...)
	ret0, _ := ret[0].(*PageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paging indicates an expected call of Paging.
func (mr *MockCommonServiceClientProxyMockRecorder) Paging(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paging", reflect.TypeOf((*MockCommonServiceClientProxy)(nil).Paging), varargs...)
}

// Ping mocks base method.
func (m *MockCommonServiceClientProxy) Ping(ctx context.Context, req *emptypb.Empty, opts ...client.Option) (*PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockCommonServiceClientProxyMockRecorder) Ping(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCommonServiceClientProxy)(nil).Ping), varargs...)
}

// MockSkyflowServiceClientProxy is a mock of SkyflowServiceClientProxy interface.
type MockSkyflowServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockSkyflowServiceClientProxyMockRecorder
	isgomock struct{}
}

// MockSkyflowServiceClientProxyMockRecorder is the mock recorder for MockSkyflowServiceClientProxy.
type MockSkyflowServiceClientProxyMockRecorder struct {
	mock *MockSkyflowServiceClientProxy
}

// NewMockSkyflowServiceClientProxy creates a new mock instance.
func NewMockSkyflowServiceClientProxy(ctrl *gomock.Controller) *MockSkyflowServiceClientProxy {
	mock := &MockSkyflowServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockSkyflowServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkyflowServiceClientProxy) EXPECT() *MockSkyflowServiceClientProxyMockRecorder {
	return m.recorder
}

// CreateActivity mocks base method.
func (m *MockSkyflowServiceClientProxy) CreateActivity(ctx context.Context, req *CreateActivityRequest, opts ...client.Option) (*CreateActivityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateActivity", varargs...)
	ret0, _ := ret[0].(*CreateActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActivity indicates an expected call of CreateActivity.
func (mr *MockSkyflowServiceClientProxyMockRecorder) CreateActivity(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActivity", reflect.TypeOf((*MockSkyflowServiceClientProxy)(nil).CreateActivity), varargs...)
}

// CreateNamespace mocks base method.
func (m *MockSkyflowServiceClientProxy) CreateNamespace(ctx context.Context, req *CreateNamespaceRequest, opts ...client.Option) (*CreateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNamespace", varargs...)
	ret0, _ := ret[0].(*CreateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockSkyflowServiceClientProxyMockRecorder) CreateNamespace(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockSkyflowServiceClientProxy)(nil).CreateNamespace), varargs...)
}

// CreateOrUpdateActivity mocks base method.
func (m *MockSkyflowServiceClientProxy) CreateOrUpdateActivity(ctx context.Context, req *CreateActivityRequest, opts ...client.Option) (*CreateActivityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdateActivity", varargs...)
	ret0, _ := ret[0].(*CreateActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateActivity indicates an expected call of CreateOrUpdateActivity.
func (mr *MockSkyflowServiceClientProxyMockRecorder) CreateOrUpdateActivity(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateActivity", reflect.TypeOf((*MockSkyflowServiceClientProxy)(nil).CreateOrUpdateActivity), varargs...)
}

// CreateOrUpdateNamespace mocks base method.
func (m *MockSkyflowServiceClientProxy) CreateOrUpdateNamespace(ctx context.Context, req *CreateNamespaceRequest, opts ...client.Option) (*CreateNamespaceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdateNamespace", varargs...)
	ret0, _ := ret[0].(*CreateNamespaceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateNamespace indicates an expected call of CreateOrUpdateNamespace.
func (mr *MockSkyflowServiceClientProxyMockRecorder) CreateOrUpdateNamespace(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateNamespace", reflect.TypeOf((*MockSkyflowServiceClientProxy)(nil).CreateOrUpdateNamespace), varargs...)
}

// DescribeActivity mocks base method.
func (m *MockSkyflowServiceClientProxy) DescribeActivity(ctx context.Context, req *DescribeActivityRequest, opts ...client.Option) (*DescribeActivityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeActivity", varargs...)
	ret0, _ := ret[0].(*DescribeActivityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeActivity indicates an expected call of DescribeActivity.
func (mr *MockSkyflowServiceClientProxyMockRecorder) DescribeActivity(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeActivity", reflect.TypeOf((*MockSkyflowServiceClientProxy)(nil).DescribeActivity), varargs...)
}

// ListActivities mocks base method.
func (m *MockSkyflowServiceClientProxy) ListActivities(ctx context.Context, req *ListActivitiesRequest, opts ...client.Option) (*ListActivitiesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActivities", varargs...)
	ret0, _ := ret[0].(*ListActivitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActivities indicates an expected call of ListActivities.
func (mr *MockSkyflowServiceClientProxyMockRecorder) ListActivities(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActivities", reflect.TypeOf((*MockSkyflowServiceClientProxy)(nil).ListActivities), varargs...)
}

// ListNamespaces mocks base method.
func (m *MockSkyflowServiceClientProxy) ListNamespaces(ctx context.Context, req *ListNamespacesRequest, opts ...client.Option) (*ListNamespacesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamespaces", varargs...)
	ret0, _ := ret[0].(*ListNamespacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockSkyflowServiceClientProxyMockRecorder) ListNamespaces(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockSkyflowServiceClientProxy)(nil).ListNamespaces), varargs...)
}
